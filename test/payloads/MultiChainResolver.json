{
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "byzantium"
  },
  "version": "0.5.8+commit.23d335f2",
  "name": "MultiChainResolver",
  "imports": [
    {
      "name": "MultiChainResolver.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"../registry/AbstractRNS.sol\";\nimport \"./AbstractPublicResolver.sol\";\nimport \"./AbstractMultiChainResolver.sol\";\nimport \"../util/AddressHelper.sol\";\n\ncontract MultiChainResolver is AbstractMultiChainResolver {\n    AbstractRNS rns;\n    AbstractPublicResolver publicResolver;\n\n    AddressHelper addressHelper;\n\n    mapping (bytes32 => bytes32) contents;\n    mapping (bytes32 => mapping (bytes8 => ChainAddress)) chainAddresses;\n\n    bytes4 constant ADDR_SIGN = 0x3b3b57de;\n    bytes4 constant CONTENT_SIGN = 0x2dff6941;\n    bytes4 constant CHAIN_ADDR_SIGN = 0x8be4b5f6;\n\n    bytes4 constant RSK_CHAIN_ID = 0x80000089;\n\n    event ContentChanged (bytes32 node, bytes32 content);\n    event ChainMetadataChanged (bytes32 node, bytes4 chain, bytes32 metadata);\n\n    struct ChainAddress {\n        bytes32 metadata;\n        string addr;\n    }\n\n    modifier onlyOwner (bytes32 node) {\n        require(rns.owner(node) == msg.sender);\n        _;\n    }\n\n    constructor (AbstractRNS _rns, AbstractPublicResolver _publicResolver) public {\n        rns = _rns;\n        publicResolver = _publicResolver;\n        addressHelper = new AddressHelper();\n    }\n\n    function () external {\n        revert();\n    }\n\n    function supportsInterface (bytes4 interfaceId) public pure returns (bool) {\n        return ((interfaceId == ADDR_SIGN) || (interfaceId == CONTENT_SIGN) || interfaceId == (CHAIN_ADDR_SIGN));\n    }\n\n    function addr (bytes32 node) public view returns (address) {\n        string memory _addr = chainAddresses[node][RSK_CHAIN_ID].addr;\n\n        if (bytes(_addr).length > 0) {\n            return addressHelper.stringToAddress(_addr);\n        }\n\n        return publicResolver.addr(node);\n    }\n\n    function setAddr (bytes32 node, address addrValue) public onlyOwner(node) {\n        chainAddresses[node][RSK_CHAIN_ID].addr = addressHelper.addressToString(addrValue);\n        emit AddrChanged(node, addrValue);\n    }\n\n    function content (bytes32 node) public view returns (bytes32) {\n        bytes32 _content = contents[node];\n\n        if (_content != 0) {\n            return _content;\n        }\n\n        return publicResolver.content(node);\n    }\n\n    function setContent (bytes32 node, bytes32 contentValue) public onlyOwner(node) {\n        contents[node] = contentValue;\n        emit ContentChanged(node, contentValue);\n    }\n\n    function chainAddr (bytes32 node, bytes4 chain) public view returns (string memory) {\n        return chainAddresses[node][chain].addr;\n    }\n\n    function setChainAddr (bytes32 node, bytes4 chain, string memory addrValue) public onlyOwner(node) {\n        chainAddresses[node][chain].addr = addrValue;\n        if (chain == RSK_CHAIN_ID) {\n            address _addr = addressHelper.stringToAddress(addrValue);\n            emit AddrChanged(node, _addr);\n        } else {\n            emit ChainAddrChanged(node, chain, addrValue);\n        }\n    }\n\n    function chainMetadata (bytes32 node, bytes4 chain) public view returns (bytes32) {\n        return chainAddresses[node][chain].metadata;\n    }\n\n    function setChainMetadata (bytes32 node, bytes4 chain, bytes32 metadataValue) public onlyOwner(node) {\n        chainAddresses[node][chain].metadata = metadataValue;\n        emit ChainMetadataChanged(node, chain, metadataValue);\n    }\n\n    function chainAddrAndMetadata (bytes32 node, bytes4 chain) public view returns (string memory, bytes32) {\n        ChainAddress storage chainAddress = chainAddresses[node][chain];\n        return (chainAddress.addr, chainAddress.metadata);\n    }\n\n    function setChainAddrWithMetadata (bytes32 node, bytes4 chain, string memory addrValue, bytes32 metadataValue) public onlyOwner(node) {\n        setChainAddr(node, chain, addrValue);\n        setChainMetadata(node, chain, metadataValue);\n    }\n}\n"
    },
    {
      "name": "Whitelist.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"./AbstractWhitelist.sol\";\n\ncontract Whitelist is AbstractWhitelist {\n\taddress public owner;\n\n\tmapping (address => bool) public isManager;\n\tmapping (address => uint) public whitelistedUntil;\n\n\tuint public whitelistedTime;\n\n\tmodifier onlyOwner () {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tmodifier onlyManagers () {\n\t\trequire(isManager[msg.sender]);\n\t\t_;\n\t}\n\n\tconstructor () public {\n\t\towner = msg.sender;\n\t\twhitelistedTime = 1 days;\n\t}\n\n\tfunction addManager (address manager) public onlyOwner() {\n\t\tisManager[manager] = true;\n\t}\n\n\tfunction removeManager (address manager) public onlyOwner() {\n\t\tisManager[manager] = false;\n\t}\n\n\tfunction addWhitelisted (address whitelisted) public onlyManagers() {\n\t\twhitelistedUntil[whitelisted] = now + whitelistedTime;\n\t}\n\n\tfunction removeWhitelisted (address whitelisted) public onlyManagers() {\n\t\twhitelistedUntil[whitelisted] = 0;\n\t}\n\n\tfunction isWhitelisted (address whitelisted) public view returns (bool) {\n\t\treturn whitelistedUntil[whitelisted] > now;\n\t}\n\n\tfunction setExpirationTime (uint time) public onlyOwner() {\n\t\twhitelistedTime = time;\n\t}\n}\n"
    },
    {
      "name": "SubdomainRegistrar.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"../registry/AbstractRNS.sol\";\n\n/**\n * @title SubdomainRegistrar\n * Allows anyone to create subnodes under a given and owned RNS node.\n */\ncontract SubdomainRegistrar {\n  AbstractRNS public rns;\n  bytes32 public rootNode;\n  address owner;\n\n  modifier onlyOwner () {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Constructor\n   * @param _rns AbstractRNS RNS registry address\n   * @param _rootNode An owned node. The contract emits subnodes under this node.\n   */\n  constructor (AbstractRNS _rns, bytes32 _rootNode) public {\n    rns = _rns;\n    rootNode = _rootNode;\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Registers a new subnode under the root node. The new node owner is the sender\n   * @param label bytres32 The label of the new subnode.\n   */\n  function register (bytes32 label) public {\n    bytes32 node = keccak256(abi.encodePacked(rootNode, label));\n    require(rns.owner(node) == address(0));\n\n    rns.setSubnodeOwner(rootNode, label, msg.sender);\n  }\n\n  /**\n   * @dev Transfers back the root node ownership to the contract's owner.\n   */\n  function transferBack () public onlyOwner() {\n    rns.setOwner(rootNode, owner);\n  }\n}\n"
    },
    {
      "name": "SafeMath.sol",
      "contents": "pragma solidity ^0.5.2;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n"
    },
    {
      "name": "RNS.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"./AbstractRNS.sol\";\n\n/**\n * The RNS registry contract.\n */\ncontract RNS is AbstractRNS {\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping(bytes32=>Record) records;\n\n    // Permits modifications only by the owner of the specified node.\n    modifier only_owner(bytes32 node) {\n        require(records[node].owner == msg.sender);\n        _;\n    }\n\n    /**\n     * Constructs a new RNS registrar.\n     */\n    constructor() public {\n        records[bytes32(0)].owner = msg.sender;\n    }\n\n    /**\n     * Returns the address that owns the specified node.\n     */\n    function owner(bytes32 node) public view returns (address) {\n        return records[node].owner;\n    }\n\n    /**\n     * Returns the address of the resolver for the specified node.\n     */\n    function resolver(bytes32 node) public view returns (address) {\n        return records[node].resolver;\n    }\n\n    /**\n     * Returns the TTL of a node, and any records associated with it.\n     */\n    function ttl(bytes32 node) public view returns (uint64) {\n        return records[node].ttl;\n    }\n\n    /**\n     * Transfers ownership of a node to a new address. May only be called by the current\n     * owner of the node.\n     * @param node The node to transfer ownership of.\n     * @param ownerAddress The address of the new owner.\n     */\n    function setOwner(bytes32 node, address ownerAddress) public only_owner(node) {\n        emit Transfer(node, ownerAddress);\n        records[node].owner = ownerAddress;\n    }\n\n    /**\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\n     * called by the owner of the parent node.\n     * @param node The parent node.\n     * @param label The hash of the label specifying the subnode.\n     * @param ownerAddress The address of the new owner.\n     */\n    function setSubnodeOwner(bytes32 node, bytes32 label, address ownerAddress) public only_owner(node) {\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\n        emit NewOwner(node, label, ownerAddress);\n        records[subnode].owner = ownerAddress;\n\n        emit NewResolver(subnode, records[node].resolver);\n        records[subnode].resolver = records[node].resolver;\n    }\n\n    /**\n     * Sets the resolver address for the specified node.\n     * @param node The node to update.\n     * @param resolverAddress The address of the resolver.\n     */\n    function setResolver(bytes32 node, address resolverAddress) public only_owner(node) {\n        emit NewResolver(node, resolverAddress);\n        records[node].resolver = resolverAddress;\n    }\n\n    /**\n     * Sets the TTL for the specified node.\n     * @param node The node to update.\n     * @param ttlValue The TTL in seconds.\n     */\n    function setTTL(bytes32 node, uint64 ttlValue) public only_owner(node) {\n        emit NewTTL(node, ttlValue);\n        records[node].ttl = ttlValue;\n    }\n\n    /**\n     * Sets the default resolver for new nodes\n     * @param _resolver The address of the new defaultResolver\n     */\n    function setDefaultResolver(address _resolver) public only_owner(0) {\n        records[bytes32(0)].resolver = _resolver;\n    }\n}\n"
    },
    {
      "name": "PublicSubdomainRegistrar.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"../registry/AbstractRNS.sol\";\n\n/**\n * @title PublicSubdomainRegistrar\n * Allows anyone to create subnodes under any delegated RNS node.\n */\ncontract PublicSubdomainRegistrar {\n    AbstractRNS public rns;\n\n    mapping (bytes32 => address) delegated;\n\n    modifier onlyOwned (bytes32 node) {\n        require(rns.owner(node) == address(this));\n        _;\n    }\n\n    modifier onlyPreviousOwner (bytes32 node) {\n        require(msg.sender == delegated[node]);\n        _;\n    }\n\n    /**\n     * @dev Constructor\n     * @param _rns AbstractRNS RNS registry address\n     */\n    constructor (AbstractRNS _rns) public {\n        rns = _rns;\n    }\n\n    /**\n     * @dev Delegates an owned node to this contract.\n     * @param node bytes32 The delegated RNS node.\n     */\n    function delegate (bytes32 node) public onlyOwned(node) {\n        delegated[node] = msg.sender;\n    }\n\n    /**\n     * @dev Check if a node is delegated to this contract.\n     * @param node bytes32 An RNS node.\n     * @return if the node is delgated\n     */\n    function isDelegated (bytes32 node) public view returns (bool) {\n        return delegated[node] != address(0);\n    }\n\n    /**\n     * @dev Transfers back a delegated node to who delegated it.\n     * @param node bytes32 Node to retrive.\n     */\n    function transferBack (bytes32 node) public onlyPreviousOwner(node) {\n        rns.setOwner(node, delegated[node]);\n        delegated[node] = address(0);\n    }\n\n    /**\n     * @dev Registrers a subnode under a given and delegated node.\n     * @param node bytes32 The parent node.\n     * @param label bytes32 The hash of the label specifying the subnode.\n     */\n    function register (bytes32 node, bytes32 label) public {\n        address subnodeOwner = rns.owner(keccak256(abi.encodePacked(node, label)));\n        require(subnodeOwner == address(0));\n\n        rns.setSubnodeOwner(node, label, msg.sender);\n    }\n}\n"
    },
    {
      "name": "PublicResolver.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"../registry/AbstractRNS.sol\";\n\n/**\n * A simple resolver anyone can use; only allows the owner of a node to set its\n * address.\n */\ncontract PublicResolver {\n    AbstractRNS rns;\n    mapping(bytes32=>address) addresses;\n    mapping(bytes32=>bytes32) hashes;\n\n    modifier only_owner(bytes32 node) {\n        require(rns.owner(node) == msg.sender);\n        _;\n    }\n\n    /**\n     * Constructor.\n     * @param rnsAddr The RNS registrar contract.\n     */\n    constructor(AbstractRNS rnsAddr) public {\n        rns = rnsAddr;\n    }\n\n    /**\n     * Fallback function.\n     */\n    function() payable external {\n        revert();\n    }\n\n    /**\n     * Returns true if the specified node has the specified record type.\n     * @param node The RNS node to query.\n     * @param kind The record type name, as specified in EIP137.\n     * @return True if this resolver has a record of the provided type on the\n     *         provided node.\n     */\n    function has(bytes32 node, bytes32 kind) public view returns (bool) {\n        return  (kind == \"addr\" && addresses[node] != address(0)) || \n        (kind == \"hash\" && hashes[node] != 0);\n    }\n\n    /**\n     * Returns true if the resolver implements the interface specified by the provided hash.\n     * @param interfaceID The ID of the interface to check for.\n     * @return True if the contract implements the requested interface.\n     */\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n        return interfaceID == 0x3b3b57de || interfaceID == 0xd8389dc5;\n    }\n\n    /**\n     * Returns the address associated with an RNS node.\n     * @param node The RNS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) public view returns (address) {\n        return addresses[node];\n    }\n\n    /**\n     * Sets the address associated with an RNS node.\n     * May only be called by the owner of that node in the RNS registry.\n     * @param node The node to update.\n     * @param addrValue The address to set.\n     */\n    function setAddr(bytes32 node, address addrValue) public only_owner(node) {\n        addresses[node] = addrValue;\n    }\n\n    /**\n     * Returns the content hash associated with an RNS node.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param node The RNS node to query.\n     * @return The associated content hash.\n     */\n    function content(bytes32 node) public view returns (bytes32) {\n        return hashes[node];\n    }\n\n    /**\n     * Sets the content hash associated with an RNS node.\n     * May only be called by the owner of that node in the RNS registry.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param node The node to update.\n     * @param hash The content hash to set\n     */\n    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n        hashes[node] = hash;\n    }\n}\n"
    },
    {
      "name": "PriceSubdomainRegistrar.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"../registry/AbstractRNS.sol\";\nimport \"../util/PaymentAdmin.sol\";\nimport \"../util/AbstractWhitelist.sol\";\nimport \"../token/ERC20Basic.sol\";\nimport \"../resolver/AbstractAddrResolver.sol\";\n\n/**\n * @title PriceSubdomainRegistrar\n * Allows anyone who is whitelisted to create subnodes under a given\n * RNS node and receive a price for doing this.\n */\ncontract PriceSubdomainRegistrar {\n    address owner = msg.sender;\n\n    PaymentAdmin public admin = new PaymentAdmin();\n    AbstractRNS public rns;\n    AbstractWhitelist public whitelist;\n    ERC20Basic public token;\n    bytes32 public rootNode;\n\n    uint256 public price = 1 * (10 ** 18);\n\n    bytes4 constant ADDR_SIGN = 0x3b3b57de;\n\n    modifier onlyOwner () {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyWhitelisted () {\n        require(whitelist.isWhitelisted(msg.sender));\n        _;\n    }\n\n    /**\n     * @dev Constructor\n     * @param _rns AbstractRNS RNS registry address.\n     * @param _whitelist AbstractWhitelist Whitelist to manage who can register domains.\n     * @param _token ERC20Basic ERC-20 token address.\n     * @param _rootNode bytes32 An owned node. The contract emits subnodes under this node.\n     */\n    constructor (AbstractRNS _rns, AbstractWhitelist _whitelist, ERC20Basic _token, bytes32 _rootNode) public {\n        rns = _rns;\n        whitelist = _whitelist;\n        rootNode = _rootNode;\n        token = _token;\n    }\n\n    /**\n     * @dev Registrers a subnode under a given and delegated node. Who registers a domain\n     * receives a token price.\n     * @param label bytres32 The label of the new subnode.\n     */\n    function register (bytes32 label, address addr) public onlyWhitelisted() {\n        bytes32 subnode = keccak256(abi.encodePacked(rootNode, label));\n        require(rns.owner(subnode) == address(0));\n\n        AbstractAddrResolver resolver = AbstractAddrResolver(rns.resolver(rootNode));\n        require(resolver.supportsInterface(ADDR_SIGN));\n\n        rns.setSubnodeOwner(rootNode, label, address(this));\n        resolver.setAddr(subnode, addr);\n\n        rns.setOwner(subnode, addr);\n        whitelist.removeWhitelisted(msg.sender);\n        admin.transfer(addr, token, price);\n    }\n\n    /**\n     * @dev Sets the price given for regstring a subnode.\n     * @param _price uint256 The new price.\n     */\n    function setPrice (uint256 _price) public onlyOwner() {\n        price = _price;\n    }\n\n    /**\n     * @dev Transfer the tokens stored in the token admin contract.\n     * @param receiver address The address of the token receiver.\n     * @param _token ERC20Basic The token to retrieve the founds of.\n     */\n    function retrieveTokens (address receiver, ERC20Basic _token) public onlyOwner() {\n        admin.retrieveTokens(receiver, _token);\n    }\n\n  /**\n   * @dev Transfers back the root node ownership to the contract's owner.\n   */\n  function transferBack () public onlyOwner() {\n    rns.setOwner(rootNode, owner);\n  }\n}\n"
    },
    {
      "name": "PaymentAdmin.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"../token/ERC20Basic.sol\";\n\ncontract PaymentAdmin {\n    address payable public owner = msg.sender;\n\n    modifier onlyOwner () {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function () external payable {\n        owner.transfer(msg.value);\n    }\n\n    function retrieveTokens (address receiver, ERC20Basic token) public onlyOwner() {\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(receiver, balance);\n    }\n\n    function transfer (address receiver, ERC20Basic token, uint256 value) public onlyOwner() {\n        token.transfer(receiver, value);\n    }\n}\n"
    },
    {
      "name": "ERC20Basic.sol",
      "contents": "pragma solidity ^0.5.2;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n"
    },
    {
      "name": "BasicToken.sol",
      "contents": "pragma solidity ^0.5.2;\n\n\nimport \"./ERC20Basic.sol\";\nimport \"../util/SafeMath.sol\";\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  constructor (uint256 _totalSupply) public {\n    totalSupply_ = _totalSupply;\n    balances[msg.sender] = _totalSupply;\n  }\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}"
    },
    {
      "name": "AddressHelper.sol",
      "contents": "pragma solidity ^0.5.2;\n\ncontract AddressHelper {\n    function addressToString (address data) public pure returns (string memory) {\n        bytes memory s = new bytes(42);\n        s[0] = \"0\";\n        s[1] = \"x\";\n        for (uint i = 0; i < 20; i++) {\n            byte b = byte(uint8(uint(data) / (2**(8*(19 - i)))));\n            byte hi = byte(uint8(b) / 16);\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\n            s[2*i + 2] = char(hi);\n            s[2*i + 3] = char(lo);\n        }\n        return string(s);\n    }\n\n    function char (byte b) internal pure returns (byte c) {\n        if (b < 0x0A) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n\n    // source: https://github.com/riflabs/RIF-Token/blob/master/contracts/util/AddressHelper.sol\n    function stringToAddress(string memory s) public pure returns(address) {\n        bytes memory ss = bytes(s);\n\n        // it should have 40 or 42 characters\n        if (ss.length != 40 && ss.length != 42) revert();\n\n        uint r = 0;\n        uint offset = 0;\n\n        if (ss.length == 42) {\n            offset = 2;\n\n            if (ss[0] != byte('0')) revert();\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\n        }\n\n        uint i;\n        uint x;\n        uint v;\n\n        // loads first 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // offset == 0x20\n        assembly { v := mload(add(0x20, ss)) }\n\n        // converts the first 32 bytes, adding to result\n        for (i = offset; i < 32; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        // loads second 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // and first 32 bytes\n        // offset == 0x40\n        assembly { v := mload(add(0x40, ss)) }\n\n        // converts the last 8 bytes, adding to result\n        for (i = 0; i < 8 + offset; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        return address(r);\n    }\n\n    function fromHexChar(uint c) public pure returns (uint) {\n        if (c >= 0x30 && c <= 0x39) {\n            return c - 0x30;\n        }\n\n        if (c >= 0x61 && c <= 0x66) {\n            return 10 + c - 0x61;\n        }\n\n        if (c >= 0x41 && c <= 0x46) {\n            return 10 + c - 0x41;\n        }\n\n        // Reaching this point means the ordinal is not for a hex char.\n        revert();\n    }\n}"
    },
    {
      "name": "AbstractWhitelist.sol",
      "contents": "pragma solidity ^0.5.2;\n\ncontract AbstractWhitelist {\n\tfunction isWhitelisted (address whitelisted) public view returns (bool);\n\tfunction removeWhitelisted (address whitelisted) public;\n}\n"
    },
    {
      "name": "AbstractRNS.sol",
      "contents": "pragma solidity ^0.5.2;\n\ncontract AbstractRNS {\n    function owner(bytes32 node) public view returns(address);\n    function resolver(bytes32 node) public view returns(address);\n    function ttl(bytes32 node) public view returns(uint64);\n    function setOwner(bytes32 node, address ownerAddress) public;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address ownerAddress) public;\n    function setResolver(bytes32 node, address resolverAddress) public;\n    function setTTL(bytes32 node, uint64 ttlValue) public;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address ownerAddress);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address ownerAddress);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolverAddress);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttlValue);\n}\n"
    },
    {
      "name": "AbstractResolver.sol",
      "contents": "pragma solidity ^0.5.2;\n\ncontract AbstractResolver {\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool);\n}\n"
    },
    {
      "name": "AbstractPublicResolver.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"./AbstractAddrResolver.sol\";\n\ncontract AbstractPublicResolver is AbstractAddrResolver {\n    function content(bytes32 node) public view returns (bytes32 ret);\n    function setContent(bytes32 node, bytes32 hashValue) public;\n    function has(bytes32 node, bytes32 kind) public view returns (bool);\n}\n"
    },
    {
      "name": "AbstractMultiChainResolver.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"./AbstractAddrResolver.sol\";\n\ncontract AbstractMultiChainResolver is AbstractAddrResolver {\n    function chainAddr(bytes32 node, bytes4 chain) public view returns (string memory);\n    function setChainAddr(bytes32 node, bytes4 chain, string memory addrValue) public;\n\n    event ChainAddrChanged(bytes32 indexed node, bytes4 chain, string addr);\n}\n"
    },
    {
      "name": "AbstractAddrResolver.sol",
      "contents": "pragma solidity ^0.5.2;\n\nimport \"./AbstractResolver.sol\";\n\ncontract AbstractAddrResolver is AbstractResolver {\n    function addr(bytes32 node) public view returns (address ret);\n    function setAddr(bytes32 node, address addrValue) public;\n\n    event AddrChanged(bytes32 indexed node, address addr);\n}\n"
    }
  ],
  "source": "pragma solidity ^0.5.2;\n\nimport \"../registry/AbstractRNS.sol\";\nimport \"./AbstractPublicResolver.sol\";\nimport \"./AbstractMultiChainResolver.sol\";\nimport \"../util/AddressHelper.sol\";\n\ncontract MultiChainResolver is AbstractMultiChainResolver {\n    AbstractRNS rns;\n    AbstractPublicResolver publicResolver;\n\n    AddressHelper addressHelper;\n\n    mapping (bytes32 => bytes32) contents;\n    mapping (bytes32 => mapping (bytes8 => ChainAddress)) chainAddresses;\n\n    bytes4 constant ADDR_SIGN = 0x3b3b57de;\n    bytes4 constant CONTENT_SIGN = 0x2dff6941;\n    bytes4 constant CHAIN_ADDR_SIGN = 0x8be4b5f6;\n\n    bytes4 constant RSK_CHAIN_ID = 0x80000089;\n\n    event ContentChanged (bytes32 node, bytes32 content);\n    event ChainMetadataChanged (bytes32 node, bytes4 chain, bytes32 metadata);\n\n    struct ChainAddress {\n        bytes32 metadata;\n        string addr;\n    }\n\n    modifier onlyOwner (bytes32 node) {\n        require(rns.owner(node) == msg.sender);\n        _;\n    }\n\n    constructor (AbstractRNS _rns, AbstractPublicResolver _publicResolver) public {\n        rns = _rns;\n        publicResolver = _publicResolver;\n        addressHelper = new AddressHelper();\n    }\n\n    function () external {\n        revert();\n    }\n\n    function supportsInterface (bytes4 interfaceId) public pure returns (bool) {\n        return ((interfaceId == ADDR_SIGN) || (interfaceId == CONTENT_SIGN) || interfaceId == (CHAIN_ADDR_SIGN));\n    }\n\n    function addr (bytes32 node) public view returns (address) {\n        string memory _addr = chainAddresses[node][RSK_CHAIN_ID].addr;\n\n        if (bytes(_addr).length > 0) {\n            return addressHelper.stringToAddress(_addr);\n        }\n\n        return publicResolver.addr(node);\n    }\n\n    function setAddr (bytes32 node, address addrValue) public onlyOwner(node) {\n        chainAddresses[node][RSK_CHAIN_ID].addr = addressHelper.addressToString(addrValue);\n        emit AddrChanged(node, addrValue);\n    }\n\n    function content (bytes32 node) public view returns (bytes32) {\n        bytes32 _content = contents[node];\n\n        if (_content != 0) {\n            return _content;\n        }\n\n        return publicResolver.content(node);\n    }\n\n    function setContent (bytes32 node, bytes32 contentValue) public onlyOwner(node) {\n        contents[node] = contentValue;\n        emit ContentChanged(node, contentValue);\n    }\n\n    function chainAddr (bytes32 node, bytes4 chain) public view returns (string memory) {\n        return chainAddresses[node][chain].addr;\n    }\n\n    function setChainAddr (bytes32 node, bytes4 chain, string memory addrValue) public onlyOwner(node) {\n        chainAddresses[node][chain].addr = addrValue;\n        if (chain == RSK_CHAIN_ID) {\n            address _addr = addressHelper.stringToAddress(addrValue);\n            emit AddrChanged(node, _addr);\n        } else {\n            emit ChainAddrChanged(node, chain, addrValue);\n        }\n    }\n\n    function chainMetadata (bytes32 node, bytes4 chain) public view returns (bytes32) {\n        return chainAddresses[node][chain].metadata;\n    }\n\n    function setChainMetadata (bytes32 node, bytes4 chain, bytes32 metadataValue) public onlyOwner(node) {\n        chainAddresses[node][chain].metadata = metadataValue;\n        emit ChainMetadataChanged(node, chain, metadataValue);\n    }\n\n    function chainAddrAndMetadata (bytes32 node, bytes4 chain) public view returns (string memory, bytes32) {\n        ChainAddress storage chainAddress = chainAddresses[node][chain];\n        return (chainAddress.addr, chainAddress.metadata);\n    }\n\n    function setChainAddrWithMetadata (bytes32 node, bytes4 chain, string memory addrValue, bytes32 metadataValue) public onlyOwner(node) {\n        setChainAddr(node, chain, addrValue);\n        setChainMetadata(node, chain, metadataValue);\n    }\n}\n",
  "constructorArguments": [
    "0xcb868aeabd31e2b66f74e9a55cf064abb31a4ad5",
    "0x4efd25e3d348f8f25a14fb7655fba6f72edfe93a"
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50604051604080620026f78339810180604052604081101561003157600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040516100d99061013d565b604051809103906000f0801580156100f5573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061014b565b6109ea8062001d0d83390190565b611bb2806200015b6000396000f3fe608060405234801561001057600080fd5b50600436106100c6576000357c0100000000000000000000000000000000000000000000000000000000900480638be4b5f61161008e5780638be4b5f614610318578063b34e8cd6146103e8578063c3d014d614610453578063d278b4001461048b578063d5fa2b0014610579578063e335bee4146105c7576100c6565b806301ffc9a7146100cb578063245d4d9a146101305780632dff6941146101915780633b3b57de146101d357806382e3bee614610241575b600080fd5b610116600480360360208110156100e157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106bf565b604051808215151515815260200191505060405180910390f35b61018f6004803603606081101561014657600080fd5b810190808035906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190505050610802565b005b6101bd600480360360208110156101a757600080fd5b81019080803590602001909291905050506109f4565b6040518082815260200191505060405180910390f35b6101ff600480360360208110156101e957600080fd5b8101908080359060200190929190505050610af4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102966004803603604081101561025757600080fd5b810190808035906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e2b565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156102dc5780820151818401526020810190506102c1565b50505050905090810190601f1680156103095780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61036d6004803603604081101561032e57600080fd5b810190808035906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610f41565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ad578082015181840152602081019050610392565b50505050905090810190601f1680156103da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61043d600480360360408110156103fe57600080fd5b810190808035906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611045565b6040518082815260200191505060405180910390f35b6104896004803603604081101561046957600080fd5b8101908080359060200190929190803590602001909291905050506110b1565b005b610577600480360360608110156104a157600080fd5b810190808035906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803590602001906401000000008111156104f157600080fd5b82018360208201111561050357600080fd5b8035906020019184600183028401116401000000008311171561052557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061120e565b005b6105c56004803603604081101561058f57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611675565b005b6106bd600480360360808110156105dd57600080fd5b810190808035906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561062d57600080fd5b82018360208201111561063f57600080fd5b8035906020019184600183028401116401000000008311171561066157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506119c3565b005b6000633b3b57de7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107905750632dff69417c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107fb5750638be4b5f67c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b823373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156108a857600080fd5b505afa1580156108bc573d6000803e3d6000fd5b505050506040513d60208110156108d257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461090357600080fd5b81600460008681526020019081526020016000206000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600001819055507f92c52f77ad49286096555eb922ca7a09249e8dd525cf58cd162fb1165686fad484848460405180848152602001837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001828152602001935050505060405180910390a150505050565b6000806003600084815260200190815260200160002054905060006001028114610a215780915050610aef565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632dff6941846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d6020811015610ada57600080fd5b81019080805190602001909291905050509150505b919050565b6000606060046000848152602001908152602001600020600063800000897c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c105780601f10610be557610100808354040283529160200191610c10565b820191906000526020600020905b815481529060010190602001808311610bf357829003601f168201915b50505050509050600081511115610d5857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166315706fdf826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ccb578082015181840152602081019050610cb0565b50505050905090810190601f168015610cf85780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015610d1557600080fd5b505afa158015610d29573d6000803e3d6000fd5b505050506040513d6020811015610d3f57600080fd5b8101908080519060200190929190505050915050610e26565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610de757600080fd5b505afa158015610dfb573d6000803e3d6000fd5b505050506040513d6020811015610e1157600080fd5b81019080805190602001909291905050509150505b919050565b6060600080600460008681526020019081526020016000206000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000209050806001018160000154818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f2e5780601f10610f0357610100808354040283529160200191610f2e565b820191906000526020600020905b815481529060010190602001808311610f1157829003601f168201915b5050505050915092509250509250929050565b6060600460008481526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110385780601f1061100d57610100808354040283529160200191611038565b820191906000526020600020905b81548152906001019060200180831161101b57829003601f168201915b5050505050905092915050565b6000600460008481526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000154905092915050565b813373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561115757600080fd5b505afa15801561116b573d6000803e3d6000fd5b505050506040513d602081101561118157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146111b257600080fd5b8160036000858152602001908152602001600020819055507f0424b6fe0d9c3bdbece0e7879dc241bb0c22e900be8b6c168b4ee08bd9bf83bc8383604051808381526020018281526020019250505060405180910390a1505050565b823373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156112b457600080fd5b505afa1580156112c8573d6000803e3d6000fd5b505050506040513d60208110156112de57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461130f57600080fd5b81600460008681526020019081526020016000206000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206001019080519060200190611384929190611ae1565b5063800000897c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561158b576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166315706fdf846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561149a57808201518184015260208101905061147f565b50505050905090810190601f1680156114c75780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d602081101561150e57600080fd5b81019080805190602001909291905050509050847f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd282604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25061166f565b837f6a3e28813f2e2e5bcd0436779f8c5cb179ceadf0379291a818b9078e772b178d848460405180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611633578082015181840152602081019050611618565b50505050905090810190601f1680156116605780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25b50505050565b813373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561171b57600080fd5b505afa15801561172f573d6000803e3d6000fd5b505050506040513d602081101561174557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461177657600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e57966d836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561183157600080fd5b505afa158015611845573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561186f57600080fd5b81019080805164010000000081111561188757600080fd5b8281019050602081018481111561189d57600080fd5b81518560018202830111640100000000821117156118ba57600080fd5b505092919050505060046000858152602001908152602001600020600063800000897c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206001019080519060200190611959929190611ae1565b50827f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd283604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2505050565b833373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611a6957600080fd5b505afa158015611a7d573d6000803e3d6000fd5b505050506040513d6020811015611a9357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611ac457600080fd5b611acf85858561120e565b611ada858584610802565b5050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b2257805160ff1916838001178555611b50565b82800160010185558215611b50579182015b82811115611b4f578251825591602001919060010190611b34565b5b509050611b5d9190611b61565b5090565b611b8391905b80821115611b7f576000816000905550600101611b67565b5090565b9056fea165627a7a72305820b32588c4fa300ee2900e195dadc9752d7d566d8c8ed2fc75d857c01f604109240029608060405234801561001057600080fd5b506109ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061005e576000357c01000000000000000000000000000000000000000000000000000000009004806315706fdf146100635780635e57966d1461015e578063b73127071461021b575b600080fd5b61011c6004803603602081101561007957600080fd5b810190808035906020019064010000000081111561009657600080fd5b8201836020820111156100a857600080fd5b803590602001918460018302840111640100000000831117156100ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061025d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a06004803603602081101561017457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061056d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e05780820151818401526020810190506101c5565b50505050905090810190601f16801561020d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102476004803603602081101561023157600080fd5b8101908080359060200190929190505050610836565b6040518082815260200191505060405180910390f35b6000606082905060288151141580156102785750602a815114155b1561028257600080fd5b60008090506000809050602a835114156104ef57600290507f30000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916836000815181106102ea57fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461036057600080fd5b7f78000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916836001815181106103b057fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141580156104e457507f58000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168360018151811061047557fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156104ee57600080fd5b5b6000806000856020015190508392505b60208310156105285780831a915061051682610836565b601086020194508260010192506104ff565b85604001519050600092505b8360080183101561055f5780831a915061054d82610836565b60108602019450826001019250610534565b849650505050505050919050565b606080602a6040519080825280601f01601f1916602001820160405280156105a45781602001600182028038833980820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106105d557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061063257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060008090505b601481101561082c5760008160130360080260020a8573ffffffffffffffffffffffffffffffffffffffff168161069a57fe5b047f010000000000000000000000000000000000000000000000000000000000000002905060006010827f0100000000000000000000000000000000000000000000000000000000000000900460ff16816106f157fe5b047f01000000000000000000000000000000000000000000000000000000000000000290506000817f01000000000000000000000000000000000000000000000000000000000000009004601002837f01000000000000000000000000000000000000000000000000000000000000009004037f0100000000000000000000000000000000000000000000000000000000000000029050610791826108ae565b8560028660020201815181106107a357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506107db816108ae565b8560038660020201815181106107ed57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080600101915050610667565b5080915050919050565b60006030821015801561084a575060398211155b1561085a576030820390506108a9565b6061821015801561086c575060668211155b1561087f57606182600a010390506108a9565b60418210158015610891575060468211155b156108a457604182600a010390506108a9565b600080fd5b919050565b6000600a7f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561094d576030827f01000000000000000000000000000000000000000000000000000000000000009004017f0100000000000000000000000000000000000000000000000000000000000000029050610999565b6057827f01000000000000000000000000000000000000000000000000000000000000009004017f01000000000000000000000000000000000000000000000000000000000000000290505b91905056fea165627a7a7230582098d6cbd1de71e089c089665c8c81128e784c5e59a16fe3c954b91ddfa5559ed40029000000000000000000000000cb868aeabd31e2b66f74e9a55cf064abb31a4ad50000000000000000000000004efd25e3d348f8f25a14fb7655fba6f72edfe93a",
  "deployedBytecode": ""
}