{
  "address": "0x40993a6609510b5f04a216045d88a24c9635883d",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "byzantium"
  },
  "version": "0.5.9+commit.e560f70d",
  "name": "Multisig",
  "imports": [
    {
      "name": "Multisig.sol",
      "contents": "pragma solidity ^0.5.4;\n\n\nimport \"./Proxy.sol\";\n\ncontract Multisig {\n\n  mapping(address => bool) public is_owner;\n  uint256 public number_of_owners;\n  // Required signatures apart from the sender's.\n  uint256 public required_extra_signatures;\n  // Unique transaction ids. If the id is already used, the transaction is reverted.\n  mapping(uint256 => bool) public is_used_tx_id;\n\n  event CallSuccessful(bytes data, address destination, uint256 indexed tx_id);\n  event CallUnsuccessful(bytes data, address destination, uint256 indexed tx_id);\n  event AddedOwner(address new_owner);\n  event RemovedOwner(address removed_owner);\n  event ChangedRequiredExtraSignatures(uint256 new_extra_signatures_requirement);\n  event DeployedNewProxy(address newProxy);\n  /**\n   * @param owners Array of addresses that act as signers of the multisig.\n   * @param initial_required_extra_signatures The amount of offline signatures needed apart from the sender.\n   */\n  constructor(address[] memory owners, uint256 initial_required_extra_signatures) public {\n    require(owners.length > 0, \"At least one owner is necessary for the multisig to work.\");\n    require(initial_required_extra_signatures < owners.length, \"Requiring more signatures than owners would deadlock the multisig.\");\n\n    for (uint256 i = 0; i < owners.length; i++) {\n      addOwnerInternal(owners[i]);\n    }\n\n    required_extra_signatures = initial_required_extra_signatures;\n  }\n\n  /**\n   * @notice Call another contract with specific call data. All needed signatures should be provided.\n             The call will be resolved in the same transaction. The message sender is counted as a signer.\n   * @param data Call data that may be interpreted by the destination contract\n   * @param destination Address that will be called by the multisig\n   * @param tx_id An ID that is ensured to be unique among calls made by the multisig. It can be used to avoid repeating certain calls.\n   * @param sig_v Array of one of the components of the payload signatures\n   * @param sig_r Array of one of the components of the payload signatures\n   * @param sig_s Array of one of the components of the payload signatures\n   */\n  function callAddress(bytes memory data, address destination, uint256 tx_id, uint8[] memory sig_v,\n                       bytes32[] memory sig_r, bytes32[] memory sig_s) public {\n    require(!is_used_tx_id[tx_id], \"Transaction ID already used\");\n    verifySignatures(data, destination, tx_id, sig_v, sig_r, sig_s);\n    is_used_tx_id[tx_id] = true;\n\n    (bool success, ) = destination.call(data);\n    if (success) {\n      emit CallSuccessful(data, destination, tx_id);\n    }\n    else {\n      emit CallUnsuccessful(data, destination, tx_id);\n    }\n  }\n\n  function deploy(address implementation, bytes calldata initialize_data) external onlyMultisig {\n    Proxy proxied_contract = new Proxy(implementation, initialize_data);\n    emit DeployedNewProxy(address(proxied_contract));\n  }\n\n  function addOwner(address new_owner) external onlyMultisig {\n    addOwnerInternal(new_owner);\n  }\n\n  function addOwnerInternal(address new_owner) internal {\n    require(new_owner != address(0), \"The new owner should be a non-zero address\");\n    require(!is_owner[new_owner], \"The address is already an owner of the multisig.\");\n\n    is_owner[new_owner] = true;\n    number_of_owners += 1;\n    emit AddedOwner(new_owner);\n  }\n\n  function removeOwner(address owner) external onlyMultisig {\n    require(is_owner[owner], \"The address should be an owner of the multisig.\");\n    require(number_of_owners > required_extra_signatures + 1, \"Cannot reduce owners below the amount of necessary signatures\");\n\n    is_owner[owner] = false;\n    number_of_owners -= 1;\n    emit RemovedOwner(owner);\n  }\n\n  function changeRequiredExtraSignatures(uint256 new_requirement) external onlyMultisig {\n    require(new_requirement < number_of_owners, \"The new signature requirement should be satisfiable by the current owners.\");\n\n    required_extra_signatures = new_requirement;\n    emit ChangedRequiredExtraSignatures(new_requirement);\n  }\n\n  /**\n   * The multisig doesn't currently support operations with ether.\n   * This allows transferral of any ether funds that happen to arrive in the contract.\n   */\n  function transferEther(uint256 value, address payable destination) external onlyMultisig {\n    require(destination != address(0), \"The destination should be a non-zero address\");\n\n    destination.transfer(value);\n  }\n\n  function verifySignatures(bytes memory data, address destination, uint256 tx_id, uint8[] memory v,\n                            bytes32[] memory r, bytes32[] memory s) private view {\n    require(is_owner[msg.sender], \"The sender is not an owner of the multisig\");\n    require(v.length == r.length && r.length == s.length, \"Inconsistent signature data.\");\n    require(v.length >= required_extra_signatures, \"Amount of required signatures is not satisfied by received signatures.\");\n\n    address[] memory verified_signers = new address[](v.length + 1);\n    verified_signers[0] = msg.sender;\n    bytes32 message_hash = keccak256(abi.encodePacked(msg.sender, data, destination, tx_id, address(this)));\n\n    // Valid indices for verified_signers: [0, i]\n    for (uint256 i = 0; i < v.length; i++) {\n      address signer = ecrecover(message_hash, v[i], r[i], s[i]);\n      require(is_owner[signer], \"One signer is not an owner.\");\n\n      // This algorithm doesn't scale well but since the amount of signers isn't typically high\n      //  it shouldn't be a problem.\n      // With Constantinople, it may be viable to use a mapping if it is cleaned at the end of this function\n      //  thanks to lower gas costs for temporal usage of storage.\n      for (uint256 j = 0; j <= i; j++) {\n        require(verified_signers[j] != signer, \"No repeated signatures are allowed.\");\n      }\n      verified_signers[i + 1] = signer;\n    }\n  }\n\n  /**\n   * @notice This modifier restricts functions to be called by the multisig itself.\n   * This means that the function call should be encoded and\n   * passed as argument to the callAddress function as well as the multisig address.\n   */\n  modifier onlyMultisig() {\n    require(msg.sender == address(this), \"Only the multisig can call this function.\");\n    _;\n  }\n\n}"
    },
    {
      "name": "Proxy.sol",
      "contents": "pragma solidity ^0.5.4;\n\n/* Flattened from https://github.com/zeppelinos/zos/tree/v2.0.1/packages/lib/contracts/upgradeability\n   With slight simplifications.\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the getImplementation() internal function.\n * An admin can change the implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n * Calls by accounts other than the admin will always be proxied.\n * This is ensured as long as the `proxyIfNotAdmin` modifier is on all external functions.\n * See ethereum/solidity#3864 for a Solidity feature proposal that would\n * enable this to be done automatically.\n */\ncontract Proxy {\n\n  /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n\n  /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n  event Upgraded(address indexed implementation);\n\n  /**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   */\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  /**\n   * @dev Contract constructor.\n   * It sets the `msg.sender` as the proxy administrator.\n   * @param implementation Address of the initial implementation.\n   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address implementation, bytes memory data) public payable {\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n\n    setAdmin(msg.sender);\n    setImplementation(implementation);\n    if (data.length > 0) {\n      (bool success, ) = implementation.delegatecall(data);\n      require(success);\n    }\n  }\n\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `fallback`.\n   */\n  function () payable external {\n    fallback();\n  }\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize)\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize)\n\n      switch result\n      // TODO: check if the Solidity compiler 0.5.3 allows perfect forwarding using the require function\n      // This would make unnecessary the use of inline assembly.\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize) }\n      default { return(0, returndatasize) }\n    }\n  }\n\n  /**\n   * @dev fallback implementation. Only fall back when the sender is not the admin.\n   * Extracted to enable manual triggering.\n   */\n  function fallback() internal {\n    require(msg.sender != getAdmin(), \"Cannot call fallback function from the proxy admin\");\n    delegate(getImplementation());\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   * @return Address of the current implementation\n   */\n  function getImplementation() internal view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /**\n   * @return The administrator account.\n   */\n  function getAdmin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n  function setImplementation(address newImplementation) private {\n    require(isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   */\n  function setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  /**\n   * @return The address of the proxy admin.\n   */\n  function admin() external proxyIfNotAdmin returns (address) {\n    return getAdmin();\n  }\n\n  /**\n   * @return The address of the implementation.\n   */\n  function implementation() external proxyIfNotAdmin returns (address) {\n    return getImplementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n  function changeAdmin(address newAdmin) external proxyIfNotAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(getAdmin(), newAdmin);\n    setAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n  function upgradeTo(address newImplementation) external proxyIfNotAdmin {\n    setImplementation(newImplementation);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.5.4/abi-spec.html#function-selector-and-argument-encoding.\n   */\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external proxyIfNotAdmin {\n    setImplementation(newImplementation);\n    (bool success, ) = newImplementation.delegatecall(data);\n    require(success);\n  }\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   */\n  modifier proxyIfNotAdmin() {\n    if (msg.sender == getAdmin()) {\n      _;\n    } else {\n      fallback();\n    }\n  }\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   *\n   * IMPORTANT: DO NOT USE THIS FUNCTION AS A SECURITY CHECK\n   *\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n}"
    }
  ],
  "source": "pragma solidity ^0.5.4;\n\n\nimport \"./Proxy.sol\";\n\ncontract Multisig {\n\n  mapping(address => bool) public is_owner;\n  uint256 public number_of_owners;\n  // Required signatures apart from the sender's.\n  uint256 public required_extra_signatures;\n  // Unique transaction ids. If the id is already used, the transaction is reverted.\n  mapping(uint256 => bool) public is_used_tx_id;\n\n  event CallSuccessful(bytes data, address destination, uint256 indexed tx_id);\n  event CallUnsuccessful(bytes data, address destination, uint256 indexed tx_id);\n  event AddedOwner(address new_owner);\n  event RemovedOwner(address removed_owner);\n  event ChangedRequiredExtraSignatures(uint256 new_extra_signatures_requirement);\n  event DeployedNewProxy(address newProxy);\n  /**\n   * @param owners Array of addresses that act as signers of the multisig.\n   * @param initial_required_extra_signatures The amount of offline signatures needed apart from the sender.\n   */\n  constructor(address[] memory owners, uint256 initial_required_extra_signatures) public {\n    require(owners.length > 0, \"At least one owner is necessary for the multisig to work.\");\n    require(initial_required_extra_signatures < owners.length, \"Requiring more signatures than owners would deadlock the multisig.\");\n\n    for (uint256 i = 0; i < owners.length; i++) {\n      addOwnerInternal(owners[i]);\n    }\n\n    required_extra_signatures = initial_required_extra_signatures;\n  }\n\n  /**\n   * @notice Call another contract with specific call data. All needed signatures should be provided.\n             The call will be resolved in the same transaction. The message sender is counted as a signer.\n   * @param data Call data that may be interpreted by the destination contract\n   * @param destination Address that will be called by the multisig\n   * @param tx_id An ID that is ensured to be unique among calls made by the multisig. It can be used to avoid repeating certain calls.\n   * @param sig_v Array of one of the components of the payload signatures\n   * @param sig_r Array of one of the components of the payload signatures\n   * @param sig_s Array of one of the components of the payload signatures\n   */\n  function callAddress(bytes memory data, address destination, uint256 tx_id, uint8[] memory sig_v,\n                       bytes32[] memory sig_r, bytes32[] memory sig_s) public {\n    require(!is_used_tx_id[tx_id], \"Transaction ID already used\");\n    verifySignatures(data, destination, tx_id, sig_v, sig_r, sig_s);\n    is_used_tx_id[tx_id] = true;\n\n    (bool success, ) = destination.call(data);\n    if (success) {\n      emit CallSuccessful(data, destination, tx_id);\n    }\n    else {\n      emit CallUnsuccessful(data, destination, tx_id);\n    }\n  }\n\n  function deploy(address implementation, bytes calldata initialize_data) external onlyMultisig {\n    Proxy proxied_contract = new Proxy(implementation, initialize_data);\n    emit DeployedNewProxy(address(proxied_contract));\n  }\n\n  function addOwner(address new_owner) external onlyMultisig {\n    addOwnerInternal(new_owner);\n  }\n\n  function addOwnerInternal(address new_owner) internal {\n    require(new_owner != address(0), \"The new owner should be a non-zero address\");\n    require(!is_owner[new_owner], \"The address is already an owner of the multisig.\");\n\n    is_owner[new_owner] = true;\n    number_of_owners += 1;\n    emit AddedOwner(new_owner);\n  }\n\n  function removeOwner(address owner) external onlyMultisig {\n    require(is_owner[owner], \"The address should be an owner of the multisig.\");\n    require(number_of_owners > required_extra_signatures + 1, \"Cannot reduce owners below the amount of necessary signatures\");\n\n    is_owner[owner] = false;\n    number_of_owners -= 1;\n    emit RemovedOwner(owner);\n  }\n\n  function changeRequiredExtraSignatures(uint256 new_requirement) external onlyMultisig {\n    require(new_requirement < number_of_owners, \"The new signature requirement should be satisfiable by the current owners.\");\n\n    required_extra_signatures = new_requirement;\n    emit ChangedRequiredExtraSignatures(new_requirement);\n  }\n\n  /**\n   * The multisig doesn't currently support operations with ether.\n   * This allows transferral of any ether funds that happen to arrive in the contract.\n   */\n  function transferEther(uint256 value, address payable destination) external onlyMultisig {\n    require(destination != address(0), \"The destination should be a non-zero address\");\n\n    destination.transfer(value);\n  }\n\n  function verifySignatures(bytes memory data, address destination, uint256 tx_id, uint8[] memory v,\n                            bytes32[] memory r, bytes32[] memory s) private view {\n    require(is_owner[msg.sender], \"The sender is not an owner of the multisig\");\n    require(v.length == r.length && r.length == s.length, \"Inconsistent signature data.\");\n    require(v.length >= required_extra_signatures, \"Amount of required signatures is not satisfied by received signatures.\");\n\n    address[] memory verified_signers = new address[](v.length + 1);\n    verified_signers[0] = msg.sender;\n    bytes32 message_hash = keccak256(abi.encodePacked(msg.sender, data, destination, tx_id, address(this)));\n\n    // Valid indices for verified_signers: [0, i]\n    for (uint256 i = 0; i < v.length; i++) {\n      address signer = ecrecover(message_hash, v[i], r[i], s[i]);\n      require(is_owner[signer], \"One signer is not an owner.\");\n\n      // This algorithm doesn't scale well but since the amount of signers isn't typically high\n      //  it shouldn't be a problem.\n      // With Constantinople, it may be viable to use a mapping if it is cleaned at the end of this function\n      //  thanks to lower gas costs for temporal usage of storage.\n      for (uint256 j = 0; j <= i; j++) {\n        require(verified_signers[j] != signer, \"No repeated signatures are allowed.\");\n      }\n      verified_signers[i + 1] = signer;\n    }\n  }\n\n  /**\n   * @notice This modifier restricts functions to be called by the multisig itself.\n   * This means that the function call should be encoded and\n   * passed as argument to the callAddress function as well as the multisig address.\n   */\n  modifier onlyMultisig() {\n    require(msg.sender == address(this), \"Only the multisig can call this function.\");\n    _;\n  }\n\n}",
  "libraries": {},
  "constructorArguments": [
    [
      "0xa6b720b6cbbfe2f55151d31b4f119fd291222905",
      "0x9f9c5f6f1e12e3bbfc787203cf6045868ce3ba2a",
      "0x6f93af0a459ff07830b0e9437f30499571f02f48"
    ],
    "0x01"
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620020ab380380620020ab833981810160405260408110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81518560208202830111640100000000821117156200008257600080fd5b505060209091015181519193509150620000e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526039815260200180620020726039913960400191505060405180910390fd5b8151811062000143576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526042815260200180620020006042913960600191505060405180910390fd5b60005b825181101562000187576200017e8382815181106200016157fe5b602002602001015162000192640100000000026401000000009004565b60010162000146565b5060025550620002c9565b600160a060020a038116620001f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018062001fd6602a913960400191505060405180910390fd5b600160a060020a03811660009081526020819052604090205460ff161562000267576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180620020426030913960400191505060405180910390fd5b600160a060020a03811660008181526020818152604091829020805460ff19166001908117909155805481019055815192835290517f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269281900390910190a150565b611cfd80620002d96000396000f3fe60806040523480156200001157600080fd5b5060043610620000c9576000357c0100000000000000000000000000000000000000000000000000000000900480639b0d975a116200008c5780639b0d975a14620003d1578063bc448a4a14620003db578063bd03e50114620003fb578063e97fac05146200042a578063ed66f8ca14620004b057620000c9565b80630776076f14620000ce578063173825d9146200010b5780633a0fe2c914620001365780637065cb48146200038c5780638866164714620003b5575b600080fd5b620000f760048036036020811015620000e657600080fd5b5035600160a060020a0316620004d0565b604080519115158252519081900360200190f35b62000134600480360360208110156200012357600080fd5b5035600160a060020a0316620004e5565b005b62000134600480360360c08110156200014e57600080fd5b8101906020810181356401000000008111156200016a57600080fd5b8201836020820111156200017d57600080fd5b80359060200191846001830284011164010000000083111715620001a057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295600160a060020a03853516956020860135959194509250606081019150604001356401000000008111156200020957600080fd5b8201836020820111156200021c57600080fd5b803590602001918460208302840111640100000000831117156200023f57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156200029057600080fd5b820183602082011115620002a357600080fd5b80359060200191846020830284011164010000000083111715620002c657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156200031757600080fd5b8201836020820111156200032a57600080fd5b803590602001918460208302840111640100000000831117156200034d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200062e945050505050565b6200013460048036036020811015620003a457600080fd5b5035600160a060020a0316620008ef565b620003bf62000940565b60408051918252519081900360200190f35b620003bf62000946565b6200013460048036036020811015620003f357600080fd5b50356200094c565b62000134600480360360408110156200041357600080fd5b5080359060200135600160a060020a031662000a0f565b62000134600480360360408110156200044257600080fd5b600160a060020a0382351691908101906040810160208201356401000000008111156200046e57600080fd5b8201836020820111156200048157600080fd5b80359060200191846001830284011164010000000083111715620004a457600080fd5b50909250905062000ad8565b620000f760048036036020811015620004c857600080fd5b503562000bd2565b60006020819052908152604090205460ff1681565b333014620005285760405160e560020a62461bcd02815260040180806020018281038252602981526020018062001ba06029913960400191505060405180910390fd5b600160a060020a03811660009081526020819052604090205460ff16620005845760405160e560020a62461bcd02815260040180806020018281038252602f81526020018062001afb602f913960400191505060405180910390fd5b60025460010160015411620005ce5760405160e560020a62461bcd02815260040180806020018281038252603d81526020018062001c16603d913960400191505060405180910390fd5b600160a060020a03811660008181526020818152604091829020805460ff1916905560018054600019019055815192835290517ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9281900390910190a150565b60008481526003602052604090205460ff161562000696576040805160e560020a62461bcd02815260206004820152601b60248201527f5472616e73616374696f6e20494420616c726561647920757365640000000000604482015290519081900360640190fd5b620006a686868686868662000be7565b6000848152600360209081526040808320805460ff19166001179055518851600160a060020a038916928a929182918401908083835b60208310620006fd5780518252601f199092019160209182019101620006dc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811462000761576040519150601f19603f3d011682016040523d82523d6000602084013e62000766565b606091505b5050905080156200082e57847f0a32fc54a2135ed982b90c7baa4b62843f0cea38ca8b0ddd9451737249acffb08888604051808060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019080838360005b83811015620007ec578181015183820152602001620007d2565b50505050905090810190601f1680156200081a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2620008e6565b847fc289d36083de812c95acfac7035905b5e8a42ba6e180f946518e1162e5f92b5b8888604051808060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019080838360005b83811015620008a95781810151838201526020016200088f565b50505050905090810190601f168015620008d75780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25b50505050505050565b333014620009325760405160e560020a62461bcd02815260040180806020018281038252602981526020018062001ba06029913960400191505060405180910390fd5b6200093d8162001003565b50565b60025481565b60015481565b3330146200098f5760405160e560020a62461bcd02815260040180806020018281038252602981526020018062001ba06029913960400191505060405180910390fd5b6001548110620009d45760405160e560020a62461bcd02815260040180806020018281038252604a81526020018062001c53604a913960600191505060405180910390fd5b60028190556040805182815290517fc0ad65538181d18a28ed70ee8892c97823cf19ad1acb07dcf2c096c895a0281b9181900360200190a150565b33301462000a525760405160e560020a62461bcd02815260040180806020018281038252602981526020018062001ba06029913960400191505060405180910390fd5b600160a060020a03811662000a9c5760405160e560020a62461bcd02815260040180806020018281038252602c81526020018062001c9d602c913960400191505060405180910390fd5b604051600160a060020a0382169083156108fc029084906000818181858888f1935050505015801562000ad3573d6000803e3d6000fd5b505050565b33301462000b1b5760405160e560020a62461bcd02815260040180806020018281038252602981526020018062001ba06029913960400191505060405180910390fd5b600083838360405162000b2e906200110c565b600160a060020a0384168152604060208201818152908201839052606082018484808284376000838201819052604051601f909201601f191690930181900397509550909350505050f08015801562000b8b573d6000803e3d6000fd5b5060408051600160a060020a038316815290519192507fd1e578bb4fb1804a1b3631a9b3102dabc11d98cad3cc449833d2680134f14324919081900360200190a150505050565b60036020526000908152604090205460ff1681565b3360009081526020819052604090205460ff1662000c3a5760405160e560020a62461bcd02815260040180806020018281038252602a81526020018062001bc9602a913960400191505060405180910390fd5b8151835114801562000c4d575080518251145b62000ca2576040805160e560020a62461bcd02815260206004820152601c60248201527f496e636f6e73697374656e74207369676e617475726520646174612e00000000604482015290519081900360640190fd5b6002548351101562000ce95760405160e560020a62461bcd02815260040180806020018281038252604681526020018062001b2a6046913960600191505060405180910390fd5b6060835160010160405190808252806020026020018201604052801562000d1a578160200160208202803883390190505b509050338160008151811062000d2c57fe5b6020026020010190600160a060020a03169081600160a060020a031681525050600033888888306040516020018086600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185805190602001908083835b6020831062000dae5780518252601f19909201916020918201910162000d8d565b51815160209384036101000a6000190180199092169116179052600160a060020a039788166c01000000000000000000000000908102929094019182526014820196909652939095160260348301525060408051808303602801815260489092019052805191012093506000925050505b855181101562000ff857600060018388848151811062000e3b57fe5b602002602001015188858151811062000e5057fe5b602002602001015188868151811062000e6557fe5b602002602001015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801562000ec5573d6000803e3d6000fd5b505060408051601f190151600160a060020a03811660009081526020819052919091205490925060ff16905062000f46576040805160e560020a62461bcd02815260206004820152601b60248201527f4f6e65207369676e6572206973206e6f7420616e206f776e65722e0000000000604482015290519081900360640190fd5b60005b82811162000fc45781600160a060020a031685828151811062000f6857fe5b6020026020010151600160a060020a0316141562000fbb5760405160e560020a62461bcd02815260040180806020018281038252602381526020018062001bf36023913960400191505060405180910390fd5b60010162000f49565b508084836001018151811062000fd657fe5b600160a060020a03909216602092830291909101909101525060010162000e1f565b505050505050505050565b600160a060020a0381166200104d5760405160e560020a62461bcd02815260040180806020018281038252602a81526020018062001ad1602a913960400191505060405180910390fd5b600160a060020a03811660009081526020819052604090205460ff1615620010aa5760405160e560020a62461bcd02815260040180806020018281038252603081526020018062001b706030913960400191505060405180910390fd5b600160a060020a03811660008181526020818152604091829020805460ff19166001908117909155805481019055815192835290517f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269281900390910190a150565b6109b6806200111b8339019056fe60806040526040516109b63803806109b68339818101604052604081101561002657600080fd5b81516020830180519193928301929164010000000081111561004757600080fd5b8201602081018481111561005a57600080fd5b815164010000000081118282018710171561007457600080fd5b50509291905050506040518080610958602391396040519081900360230190206000805160206109388339815191521490506100ac57fe5b604080517f6f72672e7a657070656c696e6f732e70726f78792e61646d696e0000000000008152905190819003601a019020600080516020610918833981519152146100f457fe5b610106336401000000006101d7810204565b610118826401000000006101e9810204565b8051156101d057600082600160a060020a0316826040518082805190602001908083835b6020831061015b5780518252601f19909201916020918201910161013c565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101bb576040519150601f19603f3d011682016040523d82523d6000602084013e6101c0565b606091505b50509050806101ce57600080fd5b505b50506102a0565b60008051602061091883398151915255565b6101fb8164010000000061029a810204565b610250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b81526020018061097b603b913960400191505060405180910390fd5b600080516020610938833981519152818155604051600160a060020a038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b3b151590565b610669806102af6000396000f3fe608060405260043610610066577c010000000000000000000000000000000000000000000000000000000060003504633659cfe681146100705780634f1ef286146100a35780635c60da1b146101235780638f28397014610154578063f851a44014610187575b61006e61019c565b005b34801561007c57600080fd5b5061006e6004803603602081101561009357600080fd5b5035600160a060020a0316610220565b61006e600480360360408110156100b957600080fd5b600160a060020a0382351691908101906040810160208201356401000000008111156100e457600080fd5b8201836020820111156100f657600080fd5b8035906020019184600183028401116401000000008311171561011857600080fd5b50909250905061025a565b34801561012f57600080fd5b50610138610307565b60408051600160a060020a039092168252519081900360200190f35b34801561016057600080fd5b5061006e6004803603602081101561017757600080fd5b5035600160a060020a0316610344565b34801561019357600080fd5b50610138610418565b6101a461043f565b600160a060020a031633600160a060020a0316141561020e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806105926032913960400191505060405180910390fd5b61021e610219610464565b610489565b565b61022861043f565b600160a060020a031633600160a060020a0316141561024f5761024a816104ad565b610257565b61025761019c565b50565b61026261043f565b600160a060020a031633600160a060020a031614156102fa57610284836104ad565b600083600160a060020a031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146102e1576040519150601f19603f3d011682016040523d82523d6000602084013e6102e6565b606091505b50509050806102f457600080fd5b50610302565b61030261019c565b505050565b600061031161043f565b600160a060020a031633600160a060020a0316141561033957610332610464565b9050610341565b61034161019c565b90565b61034c61043f565b600160a060020a031633600160a060020a0316141561024f57600160a060020a0381166103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806105c46036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103ed61043f565b60408051600160a060020a03928316815291841660208301528051918290030190a161024a81610567565b600061042261043f565b600160a060020a031633600160a060020a03161415610339576103325b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b5490565b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35490565b3660008037600080366000845af43d6000803e8080156104a8573d6000f35b3d6000fd5b6104b68161058b565b61050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001806105fa603b913960400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3818155604051600160a060020a038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b55565b3b15159056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a72305820be5dc291a71633a071316456b09523c2227ffda762f27e91524c079373e8970764736f6c6343000509003210d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c36f72672e7a657070656c696e6f732e70726f78792e696d706c656d656e746174696f6e43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373546865206e6577206f776e65722073686f756c642062652061206e6f6e2d7a65726f206164647265737354686520616464726573732073686f756c6420626520616e206f776e6572206f6620746865206d756c74697369672e416d6f756e74206f66207265717569726564207369676e617475726573206973206e6f7420736174697366696564206279207265636569766564207369676e6174757265732e546865206164647265737320697320616c726561647920616e206f776e6572206f6620746865206d756c74697369672e4f6e6c7920746865206d756c74697369672063616e2063616c6c20746869732066756e6374696f6e2e5468652073656e646572206973206e6f7420616e206f776e6572206f6620746865206d756c74697369674e6f207265706561746564207369676e6174757265732061726520616c6c6f7765642e43616e6e6f7420726564756365206f776e6572732062656c6f772074686520616d6f756e74206f66206e6563657373617279207369676e617475726573546865206e6577207369676e617475726520726571756972656d656e742073686f756c64206265207361746973666961626c65206279207468652063757272656e74206f776e6572732e5468652064657374696e6174696f6e2073686f756c642062652061206e6f6e2d7a65726f2061646472657373a265627a7a72305820d786081b78871dec7bd2d532f5d36ec1300c0eeda03ab943c8ba3dc3eb69105e64736f6c63430005090032546865206e6577206f776e65722073686f756c642062652061206e6f6e2d7a65726f2061646472657373526571756972696e67206d6f7265207369676e617475726573207468616e206f776e65727320776f756c6420646561646c6f636b20746865206d756c74697369672e546865206164647265737320697320616c726561647920616e206f776e6572206f6620746865206d756c74697369672e4174206c65617374206f6e65206f776e6572206973206e656365737361727920666f7220746865206d756c746973696720746f20776f726b2e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a6b720b6cbbfe2f55151d31b4f119fd2912229050000000000000000000000009f9c5f6f1e12e3bbfc787203cf6045868ce3ba2a0000000000000000000000006f93af0a459ff07830b0e9437f30499571f02f48",
  "deployedBytecode": ""
}