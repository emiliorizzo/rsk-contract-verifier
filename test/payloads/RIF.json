{
  "name": "RIFToken",
  "source": "pragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\nlibrary AddressHelper {\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\n        returns (address) {\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        uint8 vv = v;\n        if (vv < 27) {\n            vv += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (vv != 27 && vv != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, vv, r, s);\n        }\n\n    }\n\n    function char(byte b) public pure returns (byte c) {\n        if (b < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n\n    function getHashedPublicKey(\n        bytes32 _xPoint,\n        bytes32 _yPoint)\n        pure public\n        returns(\n            bytes20 hashedPubKey)\n    {\n        byte startingByte = 0x04;\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\n    }\n\n    function fromHexChar(uint c) public pure returns (uint) {\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\n            return c - uint(byte('0'));\n        }\n\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\n            return 10 + c - uint(byte('a'));\n        }\n\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\n            return 10 + c - uint(byte('A'));\n        }\n\n        // Reaching this point means the ordinal is not for a hex char.\n        revert();\n    }\n\n    function fromAsciiString(string s) public pure returns(address) {\n        bytes memory ss = bytes(s);\n\n        // it should have 40 or 42 characters\n        if (ss.length != 40 && ss.length != 42) revert();\n\n        uint r = 0;\n        uint offset = 0;\n\n        if (ss.length == 42) {\n            offset = 2;\n\n            if (ss[0] != byte('0')) revert();\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\n        }\n\n        uint i;\n        uint x;\n        uint v;\n\n        // loads first 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // offset == 0x20\n        assembly { v := mload(add(0x20, ss)) }\n\n        // converts the first 32 bytes, adding to result\n        for (i = offset; i < 32; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        // loads second 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // and first 32 bytes\n        // offset == 0x40\n        assembly { v := mload(add(0x40, ss)) }\n\n        // converts the last 8 bytes, adding to result\n        for (i = 0; i < 8 + offset; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        return address(r);\n    }\n}\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\nlibrary AddressLinker   {\n    using SafeMath for uint256;\n    using SafeMath for uint;\n\n    uint constant BITCOIN  = 0;\n    uint constant ETHEREUM = 1;\n\n    function acceptLinkedRskAddress(\n        address buyerAddress, uint chainId,\n        string redeemAddressAsString, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\n\n        // Verify signatures\n        bytes32 hash;\n\n        if (chainId == BITCOIN) {\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\"\\x18Bitcoin Signed Message:\\n\\x2a\", redeemAddressAsString))));\n        } else {\n            hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n42\", redeemAddressAsString));\n        }\n\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\n\n        return recoveredAddress == address(buyerAddress);\n    }\n\n    function acceptDelegate(\n        address buyerAddress, uint chainId,\n        uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\n\n        // Verify signatures\n        bytes32 hash;\n\n        if (chainId==BITCOIN) {\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\"\\x18Bitcoin Signed Message:\\n\\x0a\",\"DELEGATION\"))));\n        } else {\n            hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n10\",\"DELEGATION\"));\n        }\n\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\n\n        return recoveredAddress == address(buyerAddress);\n    }\n}\n\n\n /*\n * Contract interface for receivers of tokens that\n * comply with ERC-677.\n * See https://github.com/ethereum/EIPs/issues/677 for details.\n */\ncontract ERC677TransferReceiver {\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\n\n\n\n\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\n    /**\n     * Transfer event as described in ERC-677\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    mapping(address => uint) public minimumLeftFromSale;\n\n    // is the account of the original contributor\n    mapping(address => bool) public isInitialContributor;\n\n    // redeemed to same account or to another account\n    mapping(address => bool) public isRedeemed;\n\n    // original or redeemed contributor addresses\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\n\n    // redirect:\n    // returns new address old address is now mapped\n    mapping(address => address) public redirect;\n\n    bool public enableManagerContract;\n    address public authorizedManagerContract;\n\n    uint public distributionTime;\n\n    uint256 constant REDEEM_DEADLINE = 365 days;\n    address constant ZERO_ADDRESS = address(0);\n\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\n    // releaseOwnership()\n\n    constructor() DetailedERC20(\"RIF\",\"RIF\",18) public {\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\n        // Total => 10**27 RIFIs.\n        totalSupply_ = 10**27;\n        balances[address(this)] = totalSupply_;\n        enableManagerContract = false;\n        authorizedManagerContract = ZERO_ADDRESS;\n        distributionTime = 0;\n    }\n\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\n        address dest = getRedirectedAddress(a);\n        return minimumLeftFromSale[dest];\n    }\n\n    function disableManagerContract() public onlyAuthorizedManagerContract {\n        enableManagerContract = false;\n    }\n\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\n        require(distributionTime == 0);\n        distributionTime = _distributionTime;\n    }\n\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\n        require(authorizedManagerContract == ZERO_ADDRESS);\n        authorizedManagerContract = authorized;\n        enableManagerContract = true;\n        transferAll(this, authorized);\n    }\n\n    modifier onlyAuthorizedManagerContract() {\n        require(msg.sender==authorizedManagerContract);\n        require(enableManagerContract);\n        _;\n    }\n\n    modifier onlyWhileInDistribution() {\n        require(distributionTime == 0);\n        _;\n    }\n\n    modifier onlyAfterDistribution() {\n        require(distributionTime > 0 && now >= distributionTime);\n        _;\n    }\n\n    modifier onlyIfAddressUsable(address sender) {\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\n        _;\n    }\n\n    // Important: this is an internal function. It doesn't verify transfer rights.\n    function transferAll(address _from, address _to) internal returns (bool) {\n        require(_to != ZERO_ADDRESS);\n\n        uint256 _value;\n\n        _value = balances[_from];\n        balances[_from] = 0;\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\n        bool result = super.transfer(wallet, amount);\n\n        if (!result) revert();\n    }\n\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\n    // also TokenManager is the owner of the bonuses.\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\n        if (!validAddress(contributor)) return;\n\n        super.transfer(contributor, amount);\n\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\n\n        isInitialContributor[contributor] = true;\n        isOriginalOrRedeemedContributor[contributor] = true;\n    }\n\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\n        if (!isInitialContributor[_to]) return false;\n\n        address finalAddress = getRedirectedAddress(_to);\n\n        return super.transfer(finalAddress, _value);\n    }\n\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\n        if (!isInitialContributor[from] || isRedeemed[from]) {\n            return false;\n        }\n\n        if (!transferAll(from, to)) {\n            return false;\n        }\n\n        // mark as redirected and redeemed, for informational purposes\n        redirect[from] = to;\n        isRedeemed[from] = true;\n\n        return true;\n    }\n\n    function redeemIsAllowed() public view returns (bool) {\n        return  distributionTime > 0 &&\n                now >= distributionTime &&\n                now <= distributionTime + REDEEM_DEADLINE;\n    }\n\n    function redeemToSameAddress() public returns (bool) {\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[msg.sender]);\n\n        isRedeemed[msg.sender] = true;\n        \n        return true;\n    }\n\n    // Important: the user should not use the same contributorAddress for two different chains.\n    function redeem(\n        address contributorAddress, uint chainId,\n        string redeemAddressAsString, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\n\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[contributorAddress]);\n\n        // Avoid redeeming an already redeemed address\n        require(!isRedeemed[contributorAddress]);\n\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\n\n        // Avoid reusing a contributor address\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\n\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\n            redeemAddressAsString, sig_v, sig_r, sig_s));\n\n        // Now we must move the funds from the old address to the new address\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\n        minimumLeftFromSale[contributorAddress] = 0;\n\n        // Mark as redirected and redeemed\n        redirect[contributorAddress] = redeemAddress;\n        isRedeemed[contributorAddress] = true;\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\n\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\n        // those RIFs.\n        return transferAll(contributorAddress, redeemAddress);\n    }\n\n    function contingentRedeem(\n        address contributorAddress,\n        uint chainId,\n        address redeemAddress, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\n\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[contributorAddress]);\n\n        // Avoid redeeming an already redeemed address\n        require(!isRedeemed[contributorAddress]);\n\n        // Avoid reusing a contributor address\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\n\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\n\n        // Now we must move the funds from the old address to the new address\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\n        minimumLeftFromSale[contributorAddress] = 0;\n\n        // Mark as redirected and redeemed\n        redirect[contributorAddress] = redeemAddress;\n        isRedeemed[contributorAddress] = true;\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\n\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\n        // those RIFs.\n        return transferAll(contributorAddress, redeemAddress);\n    }\n\n    function getRedirectedAddress(address a) public view returns(address) {\n        address r = redirect[a];\n\n        if (r != ZERO_ADDRESS) {\n            return r;\n        }\n\n        return a;\n    }\n\n    function validAddress(address a) public pure returns(bool) {\n        return (a != ZERO_ADDRESS);\n    }\n\n    function wasRedirected(address a) public view returns(bool) {\n        return (redirect[a] != ZERO_ADDRESS);\n    }\n\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        // cannot transfer to a redirected account\n        if (wasRedirected(_to)) return false;\n\n        bool result = super.transfer(_to, _value);\n\n        if (!result) return false;\n\n        doTrackMinimums(msg.sender);\n\n        return true;\n    }\n\n    /**\n     * ERC-677's only method implementation\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     */\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\n        bool result = transfer(_to, _value);\n        if (!result) return false;\n\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n\n        // IMPORTANT: the ERC-677 specification does not say\n        // anything about the use of the receiver contract's\n        // tokenFallback method return value. Given\n        // its return type matches with this method's return\n        // type, returning it could be a possibility.\n        // We here take the more conservative approach and\n        // ignore the return value, returning true\n        // to signal a succesful transfer despite tokenFallback's\n        // return value -- fact being tokens are transferred\n        // in any case.\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\n        // cannot transfer to a redirected account\n        if (wasRedirected(_to)) return false;\n\n        bool result = super.transferFrom(_from, _to, _value);\n        if (!result) return false;\n\n        doTrackMinimums(_from);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function doTrackMinimums(address addr) private {\n        // We only track minimums while there's a manager\n        // contract that can pay the bonuses for which\n        // these minimums are tracked for in the first place.\n        if (!enableManagerContract) return;\n\n        uint m = minimumLeftFromSale[addr];\n\n        if ((m>0) && (balances[addr] < m)) {\n            minimumLeftFromSale[addr] = balances[addr];\n        }\n    }\n}\n\n",
  "imports": [
    {
      "name": "AddressHelper.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "AddressLinker.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "BasicToken.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "DetailedERC20.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "ERC20.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "ERC20Basic.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "ERC677TransferReceiver.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "Migrations.json",
      "contents": "\"pragma solidity >=0.4.21 <0.6.0;\\n\\ncontract Migrations {\\n  address public owner;\\n  uint public last_completed_migration;\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  modifier restricted() {\\n    if (msg.sender == owner) _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n\\n  function upgrade(address new_address) public restricted {\\n    Migrations upgraded = Migrations(new_address);\\n    upgraded.setCompleted(last_completed_migration);\\n  }\\n}\\n\""
    },
    {
      "name": "Ownable.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "SafeMath.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    },
    {
      "name": "StandardToken.json",
      "contents": "\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\\n\\nlibrary AddressHelper {\\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\\n        returns (address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        uint8 vv = v;\\n        if (vv < 27) {\\n            vv += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (vv != 27 && vv != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, vv, r, s);\\n        }\\n\\n    }\\n\\n    function char(byte b) public pure returns (byte c) {\\n        if (b < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getHashedPublicKey(\\n        bytes32 _xPoint,\\n        bytes32 _yPoint)\\n        pure public\\n        returns(\\n            bytes20 hashedPubKey)\\n    {\\n        byte startingByte = 0x04;\\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\\n    }\\n\\n    function fromHexChar(uint c) public pure returns (uint) {\\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\\n            return c - uint(byte('0'));\\n        }\\n\\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\\n            return 10 + c - uint(byte('a'));\\n        }\\n\\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\\n            return 10 + c - uint(byte('A'));\\n        }\\n\\n        // Reaching this point means the ordinal is not for a hex char.\\n        revert();\\n    }\\n\\n    function fromAsciiString(string s) public pure returns(address) {\\n        bytes memory ss = bytes(s);\\n\\n        // it should have 40 or 42 characters\\n        if (ss.length != 40 && ss.length != 42) revert();\\n\\n        uint r = 0;\\n        uint offset = 0;\\n\\n        if (ss.length == 42) {\\n            offset = 2;\\n\\n            if (ss[0] != byte('0')) revert();\\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\\n        }\\n\\n        uint i;\\n        uint x;\\n        uint v;\\n\\n        // loads first 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // offset == 0x20\\n        assembly { v := mload(add(0x20, ss)) }\\n\\n        // converts the first 32 bytes, adding to result\\n        for (i = offset; i < 32; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        // loads second 32 bytes from array,\\n        // skipping array length (32 bytes to skip)\\n        // and first 32 bytes\\n        // offset == 0x40\\n        assembly { v := mload(add(0x40, ss)) }\\n\\n        // converts the last 8 bytes, adding to result\\n        for (i = 0; i < 8 + offset; ++i) {\\n            assembly { x := byte(i, v) }\\n            r = r * 16 + fromHexChar(x);\\n        }\\n\\n        return address(r);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\\n\\nlibrary AddressLinker   {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    uint constant BITCOIN  = 0;\\n    uint constant ETHEREUM = 1;\\n\\n    function acceptLinkedRskAddress(\\n        address buyerAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId == BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x2a\\\", redeemAddressAsString))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n42\\\", redeemAddressAsString));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n\\n    function acceptDelegate(\\n        address buyerAddress, uint chainId,\\n        uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\\n\\n        // Verify signatures\\n        bytes32 hash;\\n\\n        if (chainId==BITCOIN) {\\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\\\"\\\\x18Bitcoin Signed Message:\\\\n\\\\x0a\\\",\\\"DELEGATION\\\"))));\\n        } else {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n10\\\",\\\"DELEGATION\\\"));\\n        }\\n\\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\\n\\n        return recoveredAddress == address(buyerAddress);\\n    }\\n}\\n\\n\\n /*\\n * Contract interface for receivers of tokens that\\n * comply with ERC-677.\\n * See https://github.com/ethereum/EIPs/issues/677 for details.\\n */\\ncontract ERC677TransferReceiver {\\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\\n}\\n\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value <= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue >= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\\n\\n\\n\\n\\n\\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\\n    /**\\n     * Transfer event as described in ERC-677\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    mapping(address => uint) public minimumLeftFromSale;\\n\\n    // is the account of the original contributor\\n    mapping(address => bool) public isInitialContributor;\\n\\n    // redeemed to same account or to another account\\n    mapping(address => bool) public isRedeemed;\\n\\n    // original or redeemed contributor addresses\\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\\n\\n    // redirect:\\n    // returns new address old address is now mapped\\n    mapping(address => address) public redirect;\\n\\n    bool public enableManagerContract;\\n    address public authorizedManagerContract;\\n\\n    uint public distributionTime;\\n\\n    uint256 constant REDEEM_DEADLINE = 365 days;\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\\n    // releaseOwnership()\\n\\n    constructor() DetailedERC20(\\\"RIF\\\",\\\"RIF\\\",18) public {\\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\\n        // Total => 10**27 RIFIs.\\n        totalSupply_ = 10**27;\\n        balances[address(this)] = totalSupply_;\\n        enableManagerContract = false;\\n        authorizedManagerContract = ZERO_ADDRESS;\\n        distributionTime = 0;\\n    }\\n\\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\\n        address dest = getRedirectedAddress(a);\\n        return minimumLeftFromSale[dest];\\n    }\\n\\n    function disableManagerContract() public onlyAuthorizedManagerContract {\\n        enableManagerContract = false;\\n    }\\n\\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\\n        require(distributionTime == 0);\\n        distributionTime = _distributionTime;\\n    }\\n\\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\\n        require(authorizedManagerContract == ZERO_ADDRESS);\\n        authorizedManagerContract = authorized;\\n        enableManagerContract = true;\\n        transferAll(this, authorized);\\n    }\\n\\n    modifier onlyAuthorizedManagerContract() {\\n        require(msg.sender==authorizedManagerContract);\\n        require(enableManagerContract);\\n        _;\\n    }\\n\\n    modifier onlyWhileInDistribution() {\\n        require(distributionTime == 0);\\n        _;\\n    }\\n\\n    modifier onlyAfterDistribution() {\\n        require(distributionTime > 0 && now >= distributionTime);\\n        _;\\n    }\\n\\n    modifier onlyIfAddressUsable(address sender) {\\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\\n        _;\\n    }\\n\\n    // Important: this is an internal function. It doesn't verify transfer rights.\\n    function transferAll(address _from, address _to) internal returns (bool) {\\n        require(_to != ZERO_ADDRESS);\\n\\n        uint256 _value;\\n\\n        _value = balances[_from];\\n        balances[_from] = 0;\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        bool result = super.transfer(wallet, amount);\\n\\n        if (!result) revert();\\n    }\\n\\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\\n    // also TokenManager is the owner of the bonuses.\\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\\n        if (!validAddress(contributor)) return;\\n\\n        super.transfer(contributor, amount);\\n\\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\\n\\n        isInitialContributor[contributor] = true;\\n        isOriginalOrRedeemedContributor[contributor] = true;\\n    }\\n\\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[_to]) return false;\\n\\n        address finalAddress = getRedirectedAddress(_to);\\n\\n        return super.transfer(finalAddress, _value);\\n    }\\n\\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\\n        if (!isInitialContributor[from] || isRedeemed[from]) {\\n            return false;\\n        }\\n\\n        if (!transferAll(from, to)) {\\n            return false;\\n        }\\n\\n        // mark as redirected and redeemed, for informational purposes\\n        redirect[from] = to;\\n        isRedeemed[from] = true;\\n\\n        return true;\\n    }\\n\\n    function redeemIsAllowed() public view returns (bool) {\\n        return  distributionTime > 0 &&\\n                now >= distributionTime &&\\n                now <= distributionTime + REDEEM_DEADLINE;\\n    }\\n\\n    function redeemToSameAddress() public returns (bool) {\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[msg.sender]);\\n\\n        isRedeemed[msg.sender] = true;\\n        \\n        return true;\\n    }\\n\\n    // Important: the user should not use the same contributorAddress for two different chains.\\n    function redeem(\\n        address contributorAddress, uint chainId,\\n        string redeemAddressAsString, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\\n            redeemAddressAsString, sig_v, sig_r, sig_s));\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function contingentRedeem(\\n        address contributorAddress,\\n        uint chainId,\\n        address redeemAddress, uint8 sig_v,\\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\\n\\n        require(redeemIsAllowed());\\n\\n        // Only an original contributor can be redeemed\\n        require(isInitialContributor[contributorAddress]);\\n\\n        // Avoid redeeming an already redeemed address\\n        require(!isRedeemed[contributorAddress]);\\n\\n        // Avoid reusing a contributor address\\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\\n\\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\\n\\n        // Now we must move the funds from the old address to the new address\\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\\n        minimumLeftFromSale[contributorAddress] = 0;\\n\\n        // Mark as redirected and redeemed\\n        redirect[contributorAddress] = redeemAddress;\\n        isRedeemed[contributorAddress] = true;\\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\\n\\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\\n        // those RIFs.\\n        return transferAll(contributorAddress, redeemAddress);\\n    }\\n\\n    function getRedirectedAddress(address a) public view returns(address) {\\n        address r = redirect[a];\\n\\n        if (r != ZERO_ADDRESS) {\\n            return r;\\n        }\\n\\n        return a;\\n    }\\n\\n    function validAddress(address a) public pure returns(bool) {\\n        return (a != ZERO_ADDRESS);\\n    }\\n\\n    function wasRedirected(address a) public view returns(bool) {\\n        return (redirect[a] != ZERO_ADDRESS);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transfer(_to, _value);\\n\\n        if (!result) return false;\\n\\n        doTrackMinimums(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * ERC-677's only method implementation\\n     * See https://github.com/ethereum/EIPs/issues/677 for details\\n     */\\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\\n        bool result = transfer(_to, _value);\\n        if (!result) return false;\\n\\n        emit Transfer(msg.sender, _to, _value, _data);\\n\\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\\n        receiver.tokenFallback(msg.sender, _value, _data);\\n\\n        // IMPORTANT: the ERC-677 specification does not say\\n        // anything about the use of the receiver contract's\\n        // tokenFallback method return value. Given\\n        // its return type matches with this method's return\\n        // type, returning it could be a possibility.\\n        // We here take the more conservative approach and\\n        // ignore the return value, returning true\\n        // to signal a succesful transfer despite tokenFallback's\\n        // return value -- fact being tokens are transferred\\n        // in any case.\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\\n        // cannot transfer to a redirected account\\n        if (wasRedirected(_to)) return false;\\n\\n        bool result = super.transferFrom(_from, _to, _value);\\n        if (!result) return false;\\n\\n        doTrackMinimums(_from);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.approve(_spender, _value);\\n    }\\n\\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.increaseApproval(_spender, _addedValue);\\n    }\\n\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\\n        return super.decreaseApproval(_spender, _subtractedValue);\\n    }\\n\\n    function doTrackMinimums(address addr) private {\\n        // We only track minimums while there's a manager\\n        // contract that can pay the bonuses for which\\n        // these minimums are tracked for in the first place.\\n        if (!enableManagerContract) return;\\n\\n        uint m = minimumLeftFromSale[addr];\\n\\n        if ((m>0) && (balances[addr] < m)) {\\n            minimumLeftFromSale[addr] = balances[addr];\\n        }\\n    }\\n}\\n\\n\""
    }
  ],
  "version": "0.4.25+commit.59dbf8f1",
  "settings": {
    "optimizer": {
      "enabled": false
    },
    "evmVersion": "byzantium"
  },
  "address": "0x2acc95758f8b5f583470ba265eb685a8f45fc9d5",
  "libraries": {
    "AddressHelper": "0xca29fd2e878fc7845e7248ff8f27077c932918f0",
    "AddressLinker": "0x0d00ebb7b7403bc87a113a6d44aa55882ce31438"
  },
  "bytecode": "0x60806040523480156200001157600080fd5b506040805190810160405280600381526020017f52494600000000000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f52494600000000000000000000000000000000000000000000000000000000008152506012826000908051906020019062000098929190620001d5565b508160019080519060200190620000b1929190620001d5565b5080600260006101000a81548160ff021916908360ff16021790555050505033600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b033b2e3c9fd0803ce8000000600481905550600454600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60006101000a81548160ff0219169083151502179055506000600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600c8190555062000284565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021857805160ff191683800117855562000249565b8280016001018555821562000249579182015b82811115620002485782518255916020019190600101906200022b565b5b5090506200025891906200025c565b5090565b6200028191905b808211156200027d57600081600090555060010162000263565b5090565b90565b61401080620002946000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101dd578063095ea7b31461026d57806312e89039146102d257806318160ddd1461032d57806323b872dd1461035857806329bcb186146103dd578063313ce5671461042a5780634000aea01461045b57806349c1cf6e146105065780635c1c862114610531578063661884631461058c57806369140100146105f15780636bb5cc1f1461062057806370a082311461067b578063715018a6146106d2578063814ba1a1146106e9578063826727461461072c57806385da14641461075b57806389808339146107a857806389b20af5146108565780638ab65686146108835780638da5cb5b146108fe57806390b51d431461095557806395d89b4114610a29578063a9059cbb14610ab9578063b5a36af114610b1e578063ca33056314610b4d578063cc77650614610ba8578063ccecbda714610c2b578063ce4cf7d814610c82578063d7012cc614610cdd578063d725e91f14610cf4578063d73dd62314610d77578063d8e76c5014610ddc578063dd62ed3e14610e33578063e408718214610eaa578063f2fde38b14610f01578063f9fb3c9514610f44575b600080fd5b3480156101e957600080fd5b506101f2610fa9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b506102b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611047565b604051808215151515815260200191505060405180910390f35b3480156102de57600080fd5b50610313600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611128565b604051808215151515815260200191505060405180910390f35b34801561033957600080fd5b50610342611148565b6040518082815260200191505060405180910390f35b34801561036457600080fd5b506103c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611152565b604051808215151515815260200191505060405180910390f35b3480156103e957600080fd5b50610428600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061126d565b005b34801561043657600080fd5b5061043f611416565b604051808260ff1660ff16815260200191505060405180910390f35b34801561046757600080fd5b506104ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611429565b604051808215151515815260200191505060405180910390f35b34801561051257600080fd5b5061051b611679565b6040518082815260200191505060405180910390f35b34801561053d57600080fd5b50610572600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061167f565b604051808215151515815260200191505060405180910390f35b34801561059857600080fd5b506105d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116b8565b604051808215151515815260200191505060405180910390f35b3480156105fd57600080fd5b50610606611799565b604051808215151515815260200191505060405180910390f35b34801561062c57600080fd5b50610661600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ac565b604051808215151515815260200191505060405180910390f35b34801561068757600080fd5b506106bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611844565b6040518082815260200191505060405180910390f35b3480156106de57600080fd5b506106e761188d565b005b3480156106f557600080fd5b5061072a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611992565b005b34801561073857600080fd5b50610741611ab5565b604051808215151515815260200191505060405180910390f35b34801561076757600080fd5b506107a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b81565b005b3480156107b457600080fd5b5061083c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050611c27565b604051808215151515815260200191505060405180910390f35b34801561086257600080fd5b50610881600480360381019080803590602001909291905050506120c1565b005b34801561088f57600080fd5b506108e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612153565b604051808215151515815260200191505060405180910390f35b34801561090a57600080fd5b50610913612376565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096157600080fd5b50610a0f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff1690602001909291908035600019169060200190929190803560001916906020019092919050505061239c565b604051808215151515815260200191505060405180910390f35b348015610a3557600080fd5b50610a3e612956565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a7e578082015181840152602081019050610a63565b50505050905090810190601f168015610aab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ac557600080fd5b50610b04600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506129f4565b604051808215151515815260200191505060405180910390f35b348015610b2a57600080fd5b50610b33612b0d565b604051808215151515815260200191505060405180910390f35b348015610b5957600080fd5b50610b8e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b3b565b604051808215151515815260200191505060405180910390f35b348015610bb457600080fd5b50610be9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b5b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c3757600080fd5b50610c6c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c08565b6040518082815260200191505060405180910390f35b348015610c8e57600080fd5b50610cc3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c5e565b604051808215151515815260200191505060405180910390f35b348015610ce957600080fd5b50610cf2612c7e565b005b348015610d0057600080fd5b50610d35600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d8357600080fd5b50610dc2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612d45565b604051808215151515815260200191505060405180910390f35b348015610de857600080fd5b50610df1612e26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3f57600080fd5b50610e94600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e4c565b6040518082815260200191505060405180910390f35b348015610eb657600080fd5b50610eeb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ed3565b6040518082815260200191505060405180910390f35b348015610f0d57600080fd5b50610f42600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612eeb565b005b348015610f5057600080fd5b50610f8f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612f53565b604051808215151515815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b505050505081565b600080600c5411801561105c5750600c544210155b151561106757600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158061110a5750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561111557600080fd5b61111f8484613048565b91505092915050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000600454905090565b6000806000600c541180156111695750600c544210155b151561117457600080fd5b84600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615806112175750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561122257600080fd5b61122b856117ac565b156112395760009250611264565b61124486868661313a565b91508115156112565760009250611264565b61125f866134fa565b600192505b50509392505050565b6000600c5414151561127e57600080fd5b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112da57600080fd5b600b60009054906101000a900460ff1615156112f557600080fd5b6112fe8261167f565b151561130957611412565b6113138282613635565b5080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506001600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b600260009054906101000a900460ff1681565b600080600061143886866129f4565b915081151561144a5760009250611670565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1687876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114e15780820151818401526020810190506114c6565b50505050905090810190601f16801561150e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a38590508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3387876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115e15780820151818401526020810190506115c6565b50505050905090810190601f16801561160e5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506040513d602081101561165957600080fd5b810190808051906020019092919050505050600192505b50509392505050565b600c5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080600c541180156116cd5750600c544210155b15156116d857600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158061177b5750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561178657600080fd5b611790848461385a565b91505092915050565b600b60009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118e957600080fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119ee57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a4b57600080fd5b80600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b60006101000a81548160ff021916908315150217905550611ab13082613aec565b5050565b6000611abf612b0d565b1515611aca57600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611b2257600080fd5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905090565b600080600c54141515611b9357600080fd5b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bef57600080fd5b600b60009054906101000a900460ff161515611c0a57600080fd5b611c148383613635565b9050801515611c2257600080fd5b505050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8557600080fd5b611c8d612b0d565b1515611c9857600080fd5b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611cf057600080fd5b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611d4957600080fd5b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611da257600080fd5b730d00ebb7b7403bc87a113a6d44aa55882ce3143863ab642e2d88888787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018460ff1660ff168152602001836000191660001916815260200182600019166000191681526020019550505050505060206040518083038186803b158015611e6f57600080fd5b505af4158015611e83573d6000803e3d6000fd5b505050506040513d6020811015611e9957600080fd5b81019080805190602001909291905050501515611eb557600080fd5b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506120b58786613aec565b90509695505050505050565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561211d57600080fd5b600b60009054906101000a900460ff16151561213857600080fd5b6000600c5414151561214957600080fd5b80600c8190555050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121b157600080fd5b600b60009054906101000a900460ff1615156121cc57600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158061226e5750600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561227c5760009050612370565b6122868383613aec565b15156122955760009050612370565b81600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600190505b92915050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806123a7612b0d565b15156123b257600080fd5b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561240a57600080fd5b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561246357600080fd5b73ca29fd2e878fc7845e7248ff8f27077c932918f0637acb5803876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124e95780820151818401526020810190506124ce565b50505050905090810190601f1680156125165780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561253357600080fd5b505af4158015612547573d6000803e3d6000fd5b505050506040513d602081101561255d57600080fd5b81019080805190602001909291905050509050600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156125c957600080fd5b730d00ebb7b7403bc87a113a6d44aa55882ce3143863e5d3a0f28989898989896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018560ff1660ff16815260200184600019166000191681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b838110156126b4578082015181840152602081019050612699565b50505050905090810190601f1680156126e15780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038186803b15801561270357600080fd5b505af4158015612717573d6000803e3d6000fd5b505050506040513d602081101561272d57600080fd5b8101908080519060200190929190505050151561274957600080fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506129498882613aec565b9150509695505050505050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129ec5780601f106129c1576101008083540402835291602001916129ec565b820191906000526020600020905b8154815290600101906020018083116129cf57829003601f168201915b505050505081565b6000806000600c54118015612a0b5750600c544210155b1515612a1657600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580612ab95750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612ac457600080fd5b612acd856117ac565b15612adb5760009250612b05565b612ae58585613635565b9150811515612af75760009250612b05565b612b00336134fa565b600192505b505092915050565b600080600c54118015612b225750600c544210155b8015612b3657506301e13380600c54014211155b905090565b60086020528060005260406000206000915054906101000a900460ff1681565b600080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612bfe57809150612c02565b8291505b50919050565b600080612c1483612b5b565b9050600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612cda57600080fd5b600b60009054906101000a900460ff161515612cf557600080fd5b6000600b60006101000a81548160ff021916908315150217905550565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600c54118015612d5a5750600c544210155b1515612d6557600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580612e085750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612e1357600080fd5b612e1d8484613cb7565b91505092915050565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60066020528060005260406000206000915090505481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f4757600080fd5b612f5081613eb3565b50565b600080600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612fb257600080fd5b600b60009054906101000a900460ff161515612fcd57600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156130295760009150613041565b61303284612b5b565b905061303e8184613635565b91505b5092915050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561318a57600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561321557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561325157600080fd5b6132a382600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613faf90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061333882600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061340a82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613faf90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600b60009054906101000a900460ff16151561351757613631565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811180156135a7575080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561363057600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561368557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156136c157600080fd5b61371382600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613faf90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506137a882600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808310151561396c576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a00565b61397f8382613faf90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613b2b57600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613c0481600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600191505092915050565b6000613d4882600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613eef57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515613fbd57fe5b818303905092915050565b60008183019050828110151515613fdb57fe5b809050929150505600a165627a7a72305820a02bfd68f208226d0e04a6147bf41604b057afb1bc53af6e6c5502ec00f663360029",
  "deployedBytecode": "0x6080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101dd578063095ea7b31461026d57806312e89039146102d257806318160ddd1461032d57806323b872dd1461035857806329bcb186146103dd578063313ce5671461042a5780634000aea01461045b57806349c1cf6e146105065780635c1c862114610531578063661884631461058c57806369140100146105f15780636bb5cc1f1461062057806370a082311461067b578063715018a6146106d2578063814ba1a1146106e9578063826727461461072c57806385da14641461075b57806389808339146107a857806389b20af5146108565780638ab65686146108835780638da5cb5b146108fe57806390b51d431461095557806395d89b4114610a29578063a9059cbb14610ab9578063b5a36af114610b1e578063ca33056314610b4d578063cc77650614610ba8578063ccecbda714610c2b578063ce4cf7d814610c82578063d7012cc614610cdd578063d725e91f14610cf4578063d73dd62314610d77578063d8e76c5014610ddc578063dd62ed3e14610e33578063e408718214610eaa578063f2fde38b14610f01578063f9fb3c9514610f44575b600080fd5b3480156101e957600080fd5b506101f2610fa9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b506102b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611047565b604051808215151515815260200191505060405180910390f35b3480156102de57600080fd5b50610313600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611128565b604051808215151515815260200191505060405180910390f35b34801561033957600080fd5b50610342611148565b6040518082815260200191505060405180910390f35b34801561036457600080fd5b506103c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611152565b604051808215151515815260200191505060405180910390f35b3480156103e957600080fd5b50610428600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061126d565b005b34801561043657600080fd5b5061043f611416565b604051808260ff1660ff16815260200191505060405180910390f35b34801561046757600080fd5b506104ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611429565b604051808215151515815260200191505060405180910390f35b34801561051257600080fd5b5061051b611679565b6040518082815260200191505060405180910390f35b34801561053d57600080fd5b50610572600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061167f565b604051808215151515815260200191505060405180910390f35b34801561059857600080fd5b506105d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116b8565b604051808215151515815260200191505060405180910390f35b3480156105fd57600080fd5b50610606611799565b604051808215151515815260200191505060405180910390f35b34801561062c57600080fd5b50610661600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ac565b604051808215151515815260200191505060405180910390f35b34801561068757600080fd5b506106bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611844565b6040518082815260200191505060405180910390f35b3480156106de57600080fd5b506106e761188d565b005b3480156106f557600080fd5b5061072a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611992565b005b34801561073857600080fd5b50610741611ab5565b604051808215151515815260200191505060405180910390f35b34801561076757600080fd5b506107a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b81565b005b3480156107b457600080fd5b5061083c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050611c27565b604051808215151515815260200191505060405180910390f35b34801561086257600080fd5b50610881600480360381019080803590602001909291905050506120c1565b005b34801561088f57600080fd5b506108e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612153565b604051808215151515815260200191505060405180910390f35b34801561090a57600080fd5b50610913612376565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096157600080fd5b50610a0f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff1690602001909291908035600019169060200190929190803560001916906020019092919050505061239c565b604051808215151515815260200191505060405180910390f35b348015610a3557600080fd5b50610a3e612956565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a7e578082015181840152602081019050610a63565b50505050905090810190601f168015610aab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ac557600080fd5b50610b04600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506129f4565b604051808215151515815260200191505060405180910390f35b348015610b2a57600080fd5b50610b33612b0d565b604051808215151515815260200191505060405180910390f35b348015610b5957600080fd5b50610b8e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b3b565b604051808215151515815260200191505060405180910390f35b348015610bb457600080fd5b50610be9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b5b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c3757600080fd5b50610c6c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c08565b6040518082815260200191505060405180910390f35b348015610c8e57600080fd5b50610cc3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c5e565b604051808215151515815260200191505060405180910390f35b348015610ce957600080fd5b50610cf2612c7e565b005b348015610d0057600080fd5b50610d35600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d8357600080fd5b50610dc2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612d45565b604051808215151515815260200191505060405180910390f35b348015610de857600080fd5b50610df1612e26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3f57600080fd5b50610e94600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e4c565b6040518082815260200191505060405180910390f35b348015610eb657600080fd5b50610eeb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ed3565b6040518082815260200191505060405180910390f35b348015610f0d57600080fd5b50610f42600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612eeb565b005b348015610f5057600080fd5b50610f8f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612f53565b604051808215151515815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b505050505081565b600080600c5411801561105c5750600c544210155b151561106757600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158061110a5750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561111557600080fd5b61111f8484613048565b91505092915050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000600454905090565b6000806000600c541180156111695750600c544210155b151561117457600080fd5b84600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615806112175750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561122257600080fd5b61122b856117ac565b156112395760009250611264565b61124486868661313a565b91508115156112565760009250611264565b61125f866134fa565b600192505b50509392505050565b6000600c5414151561127e57600080fd5b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112da57600080fd5b600b60009054906101000a900460ff1615156112f557600080fd5b6112fe8261167f565b151561130957611412565b6113138282613635565b5080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506001600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b600260009054906101000a900460ff1681565b600080600061143886866129f4565b915081151561144a5760009250611670565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1687876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114e15780820151818401526020810190506114c6565b50505050905090810190601f16801561150e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a38590508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3387876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115e15780820151818401526020810190506115c6565b50505050905090810190601f16801561160e5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506040513d602081101561165957600080fd5b810190808051906020019092919050505050600192505b50509392505050565b600c5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080600c541180156116cd5750600c544210155b15156116d857600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158061177b5750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561178657600080fd5b611790848461385a565b91505092915050565b600b60009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118e957600080fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119ee57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a4b57600080fd5b80600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b60006101000a81548160ff021916908315150217905550611ab13082613aec565b5050565b6000611abf612b0d565b1515611aca57600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611b2257600080fd5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905090565b600080600c54141515611b9357600080fd5b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bef57600080fd5b600b60009054906101000a900460ff161515611c0a57600080fd5b611c148383613635565b9050801515611c2257600080fd5b505050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8557600080fd5b611c8d612b0d565b1515611c9857600080fd5b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611cf057600080fd5b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611d4957600080fd5b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611da257600080fd5b730d00ebb7b7403bc87a113a6d44aa55882ce3143863ab642e2d88888787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018460ff1660ff168152602001836000191660001916815260200182600019166000191681526020019550505050505060206040518083038186803b158015611e6f57600080fd5b505af4158015611e83573d6000803e3d6000fd5b505050506040513d6020811015611e9957600080fd5b81019080805190602001909291905050501515611eb557600080fd5b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506120b58786613aec565b90509695505050505050565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561211d57600080fd5b600b60009054906101000a900460ff16151561213857600080fd5b6000600c5414151561214957600080fd5b80600c8190555050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121b157600080fd5b600b60009054906101000a900460ff1615156121cc57600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158061226e5750600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561227c5760009050612370565b6122868383613aec565b15156122955760009050612370565b81600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600190505b92915050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806123a7612b0d565b15156123b257600080fd5b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561240a57600080fd5b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561246357600080fd5b73ca29fd2e878fc7845e7248ff8f27077c932918f0637acb5803876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124e95780820151818401526020810190506124ce565b50505050905090810190601f1680156125165780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561253357600080fd5b505af4158015612547573d6000803e3d6000fd5b505050506040513d602081101561255d57600080fd5b81019080805190602001909291905050509050600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156125c957600080fd5b730d00ebb7b7403bc87a113a6d44aa55882ce3143863e5d3a0f28989898989896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018560ff1660ff16815260200184600019166000191681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b838110156126b4578082015181840152602081019050612699565b50505050905090810190601f1680156126e15780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038186803b15801561270357600080fd5b505af4158015612717573d6000803e3d6000fd5b505050506040513d602081101561272d57600080fd5b8101908080519060200190929190505050151561274957600080fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506129498882613aec565b9150509695505050505050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129ec5780601f106129c1576101008083540402835291602001916129ec565b820191906000526020600020905b8154815290600101906020018083116129cf57829003601f168201915b505050505081565b6000806000600c54118015612a0b5750600c544210155b1515612a1657600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580612ab95750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612ac457600080fd5b612acd856117ac565b15612adb5760009250612b05565b612ae58585613635565b9150811515612af75760009250612b05565b612b00336134fa565b600192505b505092915050565b600080600c54118015612b225750600c544210155b8015612b3657506301e13380600c54014211155b905090565b60086020528060005260406000206000915054906101000a900460ff1681565b600080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612bfe57809150612c02565b8291505b50919050565b600080612c1483612b5b565b9050600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612cda57600080fd5b600b60009054906101000a900460ff161515612cf557600080fd5b6000600b60006101000a81548160ff021916908315150217905550565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600c54118015612d5a5750600c544210155b1515612d6557600080fd5b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580612e085750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612e1357600080fd5b612e1d8484613cb7565b91505092915050565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60066020528060005260406000206000915090505481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f4757600080fd5b612f5081613eb3565b50565b600080600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612fb257600080fd5b600b60009054906101000a900460ff161515612fcd57600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156130295760009150613041565b61303284612b5b565b905061303e8184613635565b91505b5092915050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561318a57600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561321557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561325157600080fd5b6132a382600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613faf90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061333882600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061340a82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613faf90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600b60009054906101000a900460ff16151561351757613631565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811180156135a7575080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561363057600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561368557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156136c157600080fd5b61371382600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613faf90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506137a882600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808310151561396c576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a00565b61397f8382613faf90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613b2b57600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613c0481600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600191505092915050565b6000613d4882600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613fc890919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613eef57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515613fbd57fe5b818303905092915050565b60008183019050828110151515613fdb57fe5b809050929150505600a165627a7a72305820a02bfd68f208226d0e04a6147bf41604b057afb1bc53af6e6c5502ec00f663360029"
}