"use strict";Object.defineProperty(exports, "__esModule", { value: true });Object.defineProperty(exports, "Compiler", { enumerable: true, get: function () {return _compiler.Compiler;} });Object.defineProperty(exports, "Verifier", { enumerable: true, get: function () {return _verifier.Verifier;} });Object.defineProperty(exports, "cacheSolc", { enumerable: true, get: function () {return _cacheSolc.cacheSolc;} });exports.config = void 0;Object.defineProperty(exports, "isVerified", { enumerable: true, get: function () {return _verifier.isVerified;} });exports.solidityMetadata = void 0;Object.defineProperty(exports, "verifyParams", { enumerable: true, get: function () {return _verifyFromPayload.verifyParams;} });var _cacheSolc = require("./lib/cacheSolc");
var solidityMetadata = _interopRequireWildcard(require("./lib/solidityMetadata"));exports.solidityMetadata = solidityMetadata;
var config = _interopRequireWildcard(require("./lib/config"));exports.config = config;
var _verifier = require("./lib/verifier");
var _verifyFromPayload = require("./lib/verifyFromPayload");
var _compiler = require("./lib/compiler");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function (nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}